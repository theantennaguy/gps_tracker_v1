
gps_tracker_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b0  080030b0  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080030b0  080030b0  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b0  080030b0  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080030b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000050  08003108  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08003108  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b228  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d00  00000000  00000000  0002b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002cfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  0002dad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f59a  00000000  00000000  0002e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6a2  00000000  00000000  0003daf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005be1c  00000000  00000000  0004b194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a6fb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d0  00000000  00000000  000a7004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000050 	.word	0x20000050
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003060 	.word	0x08003060

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000054 	.word	0x20000054
 8000104:	08003060 	.word	0x08003060

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc6c 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f826 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f964 	bl	80004f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f884 	bl	800033c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000234:	f000 f8c2 	bl	80003bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f8fe 	bl	8000438 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800023c:	f000 f92c 	bl	8000498 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  PUS_Init();	// Do the power up sequence and check for problems
 8000240:	f000 f9ea 	bl	8000618 <PUS_Init>
  HAL_UART_Transmit(&huart2, start_message, start_message_size, 100); // Send starting message
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <main+0x44>)
 8000246:	881a      	ldrh	r2, [r3, #0]
 8000248:	4907      	ldr	r1, [pc, #28]	; (8000268 <main+0x48>)
 800024a:	4808      	ldr	r0, [pc, #32]	; (800026c <main+0x4c>)
 800024c:	2364      	movs	r3, #100	; 0x64
 800024e:	f001 ff59 	bl	8002104 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, (uint16_t) RX_BUFFER_SIZE);
 8000252:	2380      	movs	r3, #128	; 0x80
 8000254:	005a      	lsls	r2, r3, #1
 8000256:	4906      	ldr	r1, [pc, #24]	; (8000270 <main+0x50>)
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <main+0x54>)
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fffb 	bl	8002256 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000260:	e7fe      	b.n	8000260 <main+0x40>
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	20000042 	.word	0x20000042
 8000268:	20000020 	.word	0x20000020
 800026c:	200002a4 	.word	0x200002a4
 8000270:	20000070 	.word	0x20000070
 8000274:	200001bc 	.word	0x200001bc

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b095      	sub	sp, #84	; 0x54
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	2420      	movs	r4, #32
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2330      	movs	r3, #48	; 0x30
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f002 fee1 	bl	8003050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	2310      	movs	r3, #16
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	0018      	movs	r0, r3
 8000294:	2310      	movs	r3, #16
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f002 fed9 	bl	8003050 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029e:	003b      	movs	r3, r7
 80002a0:	0018      	movs	r0, r3
 80002a2:	2310      	movs	r3, #16
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f002 fed2 	bl	8003050 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ac:	0021      	movs	r1, r4
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2201      	movs	r2, #1
 80002b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2201      	movs	r2, #1
 80002b8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2202      	movs	r2, #2
 80002be:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	0252      	lsls	r2, r2, #9
 80002c6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	0352      	lsls	r2, r2, #13
 80002ce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 f8cd 	bl	8001478 <HAL_RCC_OscConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e2:	f000 fa49 	bl	8000778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	2110      	movs	r1, #16
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2207      	movs	r2, #7
 80002ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2202      	movs	r2, #2
 80002f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2101      	movs	r1, #1
 8000304:	0018      	movs	r0, r3
 8000306:	f001 fbd1 	bl	8001aac <HAL_RCC_ClockConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800030e:	f000 fa33 	bl	8000778 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000312:	003b      	movs	r3, r7
 8000314:	2221      	movs	r2, #33	; 0x21
 8000316:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000318:	003b      	movs	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800031e:	003b      	movs	r3, r7
 8000320:	2210      	movs	r2, #16
 8000322:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	003b      	movs	r3, r7
 8000326:	0018      	movs	r0, r3
 8000328:	f001 fd12 	bl	8001d50 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000330:	f000 fa22 	bl	8000778 <Error_Handler>
  }
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b015      	add	sp, #84	; 0x54
 800033a:	bd90      	pop	{r4, r7, pc}

0800033c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000342:	4a1c      	ldr	r2, [pc, #112]	; (80003b4 <MX_I2C1_Init+0x78>)
 8000344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000346:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000348:	4a1b      	ldr	r2, [pc, #108]	; (80003b8 <MX_I2C1_Init+0x7c>)
 800034a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000352:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000354:	2201      	movs	r2, #1
 8000356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800035e:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_I2C1_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000378:	0018      	movs	r0, r3
 800037a:	f000 ff4f 	bl	800121c <HAL_I2C_Init>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000382:	f000 f9f9 	bl	8000778 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000388:	2100      	movs	r1, #0
 800038a:	0018      	movs	r0, r3
 800038c:	f000 ffdc 	bl	8001348 <HAL_I2CEx_ConfigAnalogFilter>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000394:	f000 f9f0 	bl	8000778 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <MX_I2C1_Init+0x74>)
 800039a:	2100      	movs	r1, #0
 800039c:	0018      	movs	r0, r3
 800039e:	f001 f81f 	bl	80013e0 <HAL_I2CEx_ConfigDigitalFilter>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003a6:	f000 f9e7 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000170 	.word	0x20000170
 80003b4:	40005400 	.word	0x40005400
 80003b8:	20303e5d 	.word	0x20303e5d

080003bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <MX_SPI1_Init+0x74>)
 80003c2:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <MX_SPI1_Init+0x78>)
 80003c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <MX_SPI1_Init+0x74>)
 80003c8:	2282      	movs	r2, #130	; 0x82
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ce:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_SPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <MX_SPI1_Init+0x74>)
 80003d6:	22c0      	movs	r2, #192	; 0xc0
 80003d8:	0092      	lsls	r2, r2, #2
 80003da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_SPI1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <MX_SPI1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_SPI1_Init+0x74>)
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	0092      	lsls	r2, r2, #2
 80003ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_SPI1_Init+0x74>)
 80003f2:	2210      	movs	r2, #16
 80003f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_SPI1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_SPI1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_SPI1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_SPI1_Init+0x74>)
 800040a:	2207      	movs	r2, #7
 800040c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_SPI1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_SPI1_Init+0x74>)
 8000416:	2208      	movs	r2, #8
 8000418:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <MX_SPI1_Init+0x74>)
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fd65 	bl	8001eec <HAL_SPI_Init>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000426:	f000 f9a7 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000240 	.word	0x20000240
 8000434:	40013000 	.word	0x40013000

08000438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_USART1_UART_Init+0x58>)
 800043e:	4a15      	ldr	r2, [pc, #84]	; (8000494 <MX_USART1_UART_Init+0x5c>)
 8000440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000444:	2296      	movs	r2, #150	; 0x96
 8000446:	0192      	lsls	r2, r2, #6
 8000448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_USART1_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_USART1_UART_Init+0x58>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_USART1_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_USART1_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <MX_USART1_UART_Init+0x58>)
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fded 	bl	800205c <HAL_UART_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000486:	f000 f977 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200001bc 	.word	0x200001bc
 8000494:	40013800 	.word	0x40013800

08000498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 800049e:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <MX_USART2_UART_Init+0x5c>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004a4:	2296      	movs	r2, #150	; 0x96
 80004a6:	0212      	lsls	r2, r2, #8
 80004a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004be:	220c      	movs	r2, #12
 80004c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <MX_USART2_UART_Init+0x58>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 fdbd 	bl	800205c <HAL_UART_Init>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004e6:	f000 f947 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200002a4 	.word	0x200002a4
 80004f4:	40004400 	.word	0x40004400

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b08b      	sub	sp, #44	; 0x2c
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	2414      	movs	r4, #20
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2314      	movs	r3, #20
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 fda1 	bl	8003050 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050e:	4b3f      	ldr	r3, [pc, #252]	; (800060c <MX_GPIO_Init+0x114>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b3e      	ldr	r3, [pc, #248]	; (800060c <MX_GPIO_Init+0x114>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	03c9      	lsls	r1, r1, #15
 8000518:	430a      	orrs	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	4b3b      	ldr	r3, [pc, #236]	; (800060c <MX_GPIO_Init+0x114>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	03db      	lsls	r3, r3, #15
 8000524:	4013      	ands	r3, r2
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4b38      	ldr	r3, [pc, #224]	; (800060c <MX_GPIO_Init+0x114>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b37      	ldr	r3, [pc, #220]	; (800060c <MX_GPIO_Init+0x114>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0309      	lsls	r1, r1, #12
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b34      	ldr	r3, [pc, #208]	; (800060c <MX_GPIO_Init+0x114>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	031b      	lsls	r3, r3, #12
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b31      	ldr	r3, [pc, #196]	; (800060c <MX_GPIO_Init+0x114>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b30      	ldr	r3, [pc, #192]	; (800060c <MX_GPIO_Init+0x114>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0289      	lsls	r1, r1, #10
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b2d      	ldr	r3, [pc, #180]	; (800060c <MX_GPIO_Init+0x114>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	029b      	lsls	r3, r3, #10
 800055c:	4013      	ands	r3, r2
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b2a      	ldr	r3, [pc, #168]	; (800060c <MX_GPIO_Init+0x114>)
 8000564:	695a      	ldr	r2, [r3, #20]
 8000566:	4b29      	ldr	r3, [pc, #164]	; (800060c <MX_GPIO_Init+0x114>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	02c9      	lsls	r1, r1, #11
 800056c:	430a      	orrs	r2, r1
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	4b26      	ldr	r3, [pc, #152]	; (800060c <MX_GPIO_Init+0x114>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	02db      	lsls	r3, r3, #11
 8000578:	4013      	ands	r3, r2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DTR_Pin|RESET_GSM_Pin|LED_DBG_Pin, GPIO_PIN_RESET);
 800057e:	2383      	movs	r3, #131	; 0x83
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4823      	ldr	r0, [pc, #140]	; (8000610 <MX_GPIO_Init+0x118>)
 8000584:	2200      	movs	r2, #0
 8000586:	0019      	movs	r1, r3
 8000588:	f000 fe2b 	bl	80011e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPS_GPIO_Port, RESET_GPS_Pin, GPIO_PIN_RESET);
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <MX_GPIO_Init+0x11c>)
 800058e:	2200      	movs	r2, #0
 8000590:	2102      	movs	r1, #2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fe25 	bl	80011e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DTR_Pin RESET_GSM_Pin LED_DBG_Pin */
  GPIO_InitStruct.Pin = DTR_Pin|RESET_GSM_Pin|LED_DBG_Pin;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2283      	movs	r2, #131	; 0x83
 800059c:	0052      	lsls	r2, r2, #1
 800059e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2201      	movs	r2, #1
 80005a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	4a16      	ldr	r2, [pc, #88]	; (8000610 <MX_GPIO_Init+0x118>)
 80005b6:	0019      	movs	r1, r3
 80005b8:	0010      	movs	r0, r2
 80005ba:	f000 fc85 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_GPS_Pin */
  GPIO_InitStruct.Pin = RESET_GPS_Pin;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2202      	movs	r2, #2
 80005c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2201      	movs	r2, #1
 80005c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RESET_GPS_GPIO_Port, &GPIO_InitStruct);
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <MX_GPIO_Init+0x11c>)
 80005da:	0019      	movs	r1, r3
 80005dc:	0010      	movs	r0, r2
 80005de:	f000 fc73 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGOOD_Pin PPS_GPS_Pin RING_Pin */
  GPIO_InitStruct.Pin = PGOOD_Pin|PPS_GPS_Pin|RING_Pin;
 80005e2:	0021      	movs	r1, r4
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	22e0      	movs	r2, #224	; 0xe0
 80005e8:	0152      	lsls	r2, r2, #5
 80005ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	4a06      	ldr	r2, [pc, #24]	; (8000614 <MX_GPIO_Init+0x11c>)
 80005fc:	0019      	movs	r1, r3
 80005fe:	0010      	movs	r0, r2
 8000600:	f000 fc62 	bl	8000ec8 <HAL_GPIO_Init>

}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b00b      	add	sp, #44	; 0x2c
 800060a:	bd90      	pop	{r4, r7, pc}
 800060c:	40021000 	.word	0x40021000
 8000610:	48000800 	.word	0x48000800
 8000614:	48000400 	.word	0x48000400

08000618 <PUS_Init>:
  * 		Check PGOOD
  * 		If PGOOD is ok, blink LED 3 times
  * @retval None
  */
static void PUS_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GSM_GPIO_Port, RESET_GSM_Pin, GPIO_PIN_SET);
 800061c:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <PUS_Init+0xe0>)
 800061e:	2201      	movs	r2, #1
 8000620:	2104      	movs	r1, #4
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fddd 	bl	80011e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_GPS_GPIO_Port, RESET_GPS_Pin, GPIO_PIN_SET);
 8000628:	4b34      	ldr	r3, [pc, #208]	; (80006fc <PUS_Init+0xe4>)
 800062a:	2201      	movs	r2, #1
 800062c:	2102      	movs	r1, #2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fdd7 	bl	80011e2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f000 fac7 	bl	8000bc8 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_GSM_GPIO_Port, RESET_GSM_Pin, GPIO_PIN_RESET);
 800063a:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <PUS_Init+0xe0>)
 800063c:	2200      	movs	r2, #0
 800063e:	2104      	movs	r1, #4
 8000640:	0018      	movs	r0, r3
 8000642:	f000 fdce 	bl	80011e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_GPS_GPIO_Port, RESET_GPS_Pin, GPIO_PIN_RESET);
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <PUS_Init+0xe4>)
 8000648:	2200      	movs	r2, #0
 800064a:	2102      	movs	r1, #2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fdc8 	bl	80011e2 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(PGOOD_GPIO_Port, PGOOD_Pin))
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	4a29      	ldr	r2, [pc, #164]	; (80006fc <PUS_Init+0xe4>)
 8000658:	0019      	movs	r1, r3
 800065a:	0010      	movs	r0, r2
 800065c:	f000 fda4 	bl	80011a8 <HAL_GPIO_ReadPin>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d03c      	beq.n	80006de <PUS_Init+0xc6>
	{
		pgood = 1;
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <PUS_Init+0xe8>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4822      	ldr	r0, [pc, #136]	; (80006f8 <PUS_Init+0xe0>)
 8000670:	2201      	movs	r2, #1
 8000672:	0019      	movs	r1, r3
 8000674:	f000 fdb5 	bl	80011e2 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 8000678:	20fa      	movs	r0, #250	; 0xfa
 800067a:	f000 faa5 	bl	8000bc8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_RESET);
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	481d      	ldr	r0, [pc, #116]	; (80006f8 <PUS_Init+0xe0>)
 8000684:	2200      	movs	r2, #0
 8000686:	0019      	movs	r1, r3
 8000688:	f000 fdab 	bl	80011e2 <HAL_GPIO_WritePin>
		HAL_Delay(150);
 800068c:	2096      	movs	r0, #150	; 0x96
 800068e:	f000 fa9b 	bl	8000bc8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4818      	ldr	r0, [pc, #96]	; (80006f8 <PUS_Init+0xe0>)
 8000698:	2201      	movs	r2, #1
 800069a:	0019      	movs	r1, r3
 800069c:	f000 fda1 	bl	80011e2 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80006a0:	20fa      	movs	r0, #250	; 0xfa
 80006a2:	f000 fa91 	bl	8000bc8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_RESET);
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4813      	ldr	r0, [pc, #76]	; (80006f8 <PUS_Init+0xe0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	0019      	movs	r1, r3
 80006b0:	f000 fd97 	bl	80011e2 <HAL_GPIO_WritePin>
		HAL_Delay(150);
 80006b4:	2096      	movs	r0, #150	; 0x96
 80006b6:	f000 fa87 	bl	8000bc8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <PUS_Init+0xe0>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	0019      	movs	r1, r3
 80006c4:	f000 fd8d 	bl	80011e2 <HAL_GPIO_WritePin>
		HAL_Delay(250);
 80006c8:	20fa      	movs	r0, #250	; 0xfa
 80006ca:	f000 fa7d 	bl	8000bc8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_RESET);
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <PUS_Init+0xe0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	0019      	movs	r1, r3
 80006d8:	f000 fd83 	bl	80011e2 <HAL_GPIO_WritePin>
	} else {
		pgood = 0;
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
	}

}
 80006dc:	e009      	b.n	80006f2 <PUS_Init+0xda>
		pgood = 0;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <PUS_Init+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_DBG_GPIO_Port, LED_DBG_Pin, GPIO_PIN_SET);
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <PUS_Init+0xe0>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	0019      	movs	r1, r3
 80006ee:	f000 fd78 	bl	80011e2 <HAL_GPIO_WritePin>
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	48000800 	.word	0x48000800
 80006fc:	48000400 	.word	0x48000400
 8000700:	2000006c 	.word	0x2000006c

08000704 <NMEA_Msg_Parser>:
  * 		Data is parsed from the NMEA messages GPRMC for location, speed and date and time
  * 		Data is parsed from NMEA messages GPGGA for location, and signal quality
  * @retval None
  */
static uint8_t NMEA_Msg_Parser(uint8_t *msg, uint8_t msg_size)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	000a      	movs	r2, r1
 800070e:	1cfb      	adds	r3, r7, #3
 8000710:	701a      	strb	r2, [r3, #0]
	return 1;
 8000712:	2301      	movs	r3, #1
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	b002      	add	sp, #8
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

	if(NMEA_Msg_Parser(UART1_rxBuffer, (uint8_t)RX_BUFFER_SIZE))
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_UART_RxCpltCallback+0x48>)
 8000726:	2100      	movs	r1, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff ffeb 	bl	8000704 <NMEA_Msg_Parser>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d006      	beq.n	8000740 <HAL_UART_RxCpltCallback+0x24>
	{
		HAL_UART_Transmit(&huart2, fix_message, sizeof(fix_message), 100);
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <HAL_UART_RxCpltCallback+0x4c>)
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <HAL_UART_RxCpltCallback+0x50>)
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	220c      	movs	r2, #12
 800073a:	f001 fce3 	bl	8002104 <HAL_UART_Transmit>
 800073e:	e005      	b.n	800074c <HAL_UART_RxCpltCallback+0x30>
	} else {
		HAL_UART_Transmit(&huart2, no_fix_message, sizeof(no_fix_message), 100);
 8000740:	490b      	ldr	r1, [pc, #44]	; (8000770 <HAL_UART_RxCpltCallback+0x54>)
 8000742:	480a      	ldr	r0, [pc, #40]	; (800076c <HAL_UART_RxCpltCallback+0x50>)
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	2212      	movs	r2, #18
 8000748:	f001 fcdc 	bl	8002104 <HAL_UART_Transmit>
	}
	//HAL_UART_Transmit(&huart2, UART1_rxBuffer, RX_BUFFER_SIZE, 100);
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, (uint16_t) RX_BUFFER_SIZE);
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	005a      	lsls	r2, r3, #1
 8000750:	4904      	ldr	r1, [pc, #16]	; (8000764 <HAL_UART_RxCpltCallback+0x48>)
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_UART_RxCpltCallback+0x58>)
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fd7e 	bl	8002256 <HAL_UART_Receive_IT>
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	20000070 	.word	0x20000070
 8000768:	20000014 	.word	0x20000014
 800076c:	200002a4 	.word	0x200002a4
 8000770:	20000000 	.word	0x20000000
 8000774:	200001bc 	.word	0x200001bc

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_MspInit+0x44>)
 800078c:	699a      	ldr	r2, [r3, #24]
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_MspInit+0x44>)
 8000790:	2101      	movs	r1, #1
 8000792:	430a      	orrs	r2, r1
 8000794:	619a      	str	r2, [r3, #24]
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_MspInit+0x44>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	2201      	movs	r2, #1
 800079c:	4013      	ands	r3, r2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_MspInit+0x44>)
 80007a4:	69da      	ldr	r2, [r3, #28]
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_MspInit+0x44>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	0549      	lsls	r1, r1, #21
 80007ac:	430a      	orrs	r2, r1
 80007ae:	61da      	str	r2, [r3, #28]
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_MspInit+0x44>)
 80007b2:	69da      	ldr	r2, [r3, #28]
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	055b      	lsls	r3, r3, #21
 80007b8:	4013      	ands	r3, r2
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b08b      	sub	sp, #44	; 0x2c
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	2414      	movs	r4, #20
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	0018      	movs	r0, r3
 80007da:	2314      	movs	r3, #20
 80007dc:	001a      	movs	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	f002 fc36 	bl	8003050 <memset>
  if(hi2c->Instance==I2C1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a1c      	ldr	r2, [pc, #112]	; (800085c <HAL_I2C_MspInit+0x90>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d132      	bne.n	8000854 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <HAL_I2C_MspInit+0x94>)
 80007f0:	695a      	ldr	r2, [r3, #20]
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <HAL_I2C_MspInit+0x94>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	02c9      	lsls	r1, r1, #11
 80007f8:	430a      	orrs	r2, r1
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_I2C_MspInit+0x94>)
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	02db      	lsls	r3, r3, #11
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	22c0      	movs	r2, #192	; 0xc0
 800080e:	0092      	lsls	r2, r2, #2
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000812:	0021      	movs	r1, r4
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2212      	movs	r2, #18
 8000818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2201      	movs	r2, #1
 800081e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2203      	movs	r2, #3
 8000824:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2201      	movs	r2, #1
 800082a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	187b      	adds	r3, r7, r1
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <HAL_I2C_MspInit+0x98>)
 8000830:	0019      	movs	r1, r3
 8000832:	0010      	movs	r0, r2
 8000834:	f000 fb48 	bl	8000ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_I2C_MspInit+0x94>)
 800083a:	69da      	ldr	r2, [r3, #28]
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_I2C_MspInit+0x94>)
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	0389      	lsls	r1, r1, #14
 8000842:	430a      	orrs	r2, r1
 8000844:	61da      	str	r2, [r3, #28]
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_I2C_MspInit+0x94>)
 8000848:	69da      	ldr	r2, [r3, #28]
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	039b      	lsls	r3, r3, #14
 800084e:	4013      	ands	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b00b      	add	sp, #44	; 0x2c
 800085a:	bd90      	pop	{r4, r7, pc}
 800085c:	40005400 	.word	0x40005400
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400

08000868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	; 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	2414      	movs	r4, #20
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f002 fbe8 	bl	8003050 <memset>
  if(hspi->Instance==SPI1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <HAL_SPI_MspInit+0x90>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d132      	bne.n	80008f0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <HAL_SPI_MspInit+0x94>)
 800088c:	699a      	ldr	r2, [r3, #24]
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <HAL_SPI_MspInit+0x94>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0149      	lsls	r1, r1, #5
 8000894:	430a      	orrs	r2, r1
 8000896:	619a      	str	r2, [r3, #24]
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_SPI_MspInit+0x94>)
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	015b      	lsls	r3, r3, #5
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_SPI_MspInit+0x94>)
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_SPI_MspInit+0x94>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0289      	lsls	r1, r1, #10
 80008b0:	430a      	orrs	r2, r1
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_SPI_MspInit+0x94>)
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	029b      	lsls	r3, r3, #10
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008c2:	0021      	movs	r1, r4
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	22e0      	movs	r2, #224	; 0xe0
 80008c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2202      	movs	r2, #2
 80008ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2203      	movs	r2, #3
 80008da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	187a      	adds	r2, r7, r1
 80008e4:	2390      	movs	r3, #144	; 0x90
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 faec 	bl	8000ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b00b      	add	sp, #44	; 0x2c
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	40013000 	.word	0x40013000
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b08d      	sub	sp, #52	; 0x34
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	241c      	movs	r4, #28
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0018      	movs	r0, r3
 800090e:	2314      	movs	r3, #20
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f002 fb9c 	bl	8003050 <memset>
  if(huart->Instance==USART1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a41      	ldr	r2, [pc, #260]	; (8000a24 <HAL_UART_MspInit+0x124>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d13c      	bne.n	800099c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000922:	4b41      	ldr	r3, [pc, #260]	; (8000a28 <HAL_UART_MspInit+0x128>)
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <HAL_UART_MspInit+0x128>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	01c9      	lsls	r1, r1, #7
 800092c:	430a      	orrs	r2, r1
 800092e:	619a      	str	r2, [r3, #24]
 8000930:	4b3d      	ldr	r3, [pc, #244]	; (8000a28 <HAL_UART_MspInit+0x128>)
 8000932:	699a      	ldr	r2, [r3, #24]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	01db      	lsls	r3, r3, #7
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <HAL_UART_MspInit+0x128>)
 8000940:	695a      	ldr	r2, [r3, #20]
 8000942:	4b39      	ldr	r3, [pc, #228]	; (8000a28 <HAL_UART_MspInit+0x128>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	0289      	lsls	r1, r1, #10
 8000948:	430a      	orrs	r2, r1
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <HAL_UART_MspInit+0x128>)
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	029b      	lsls	r3, r3, #10
 8000954:	4013      	ands	r3, r2
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_1_Pin|RX_1_Pin;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	22c0      	movs	r2, #192	; 0xc0
 800095e:	00d2      	lsls	r2, r2, #3
 8000960:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	0021      	movs	r1, r4
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2202      	movs	r2, #2
 8000968:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2203      	movs	r2, #3
 8000974:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2201      	movs	r2, #1
 800097a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	187a      	adds	r2, r7, r1
 800097e:	2390      	movs	r3, #144	; 0x90
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	0011      	movs	r1, r2
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fa9f 	bl	8000ec8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	201b      	movs	r0, #27
 8000990:	f000 f9ea 	bl	8000d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000994:	201b      	movs	r0, #27
 8000996:	f000 f9fc 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099a:	e03f      	b.n	8000a1c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a22      	ldr	r2, [pc, #136]	; (8000a2c <HAL_UART_MspInit+0x12c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d13a      	bne.n	8000a1c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_UART_MspInit+0x128>)
 80009a8:	69da      	ldr	r2, [r3, #28]
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_UART_MspInit+0x128>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0289      	lsls	r1, r1, #10
 80009b0:	430a      	orrs	r2, r1
 80009b2:	61da      	str	r2, [r3, #28]
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_UART_MspInit+0x128>)
 80009b6:	69da      	ldr	r2, [r3, #28]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	029b      	lsls	r3, r3, #10
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0x128>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x128>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0289      	lsls	r1, r1, #10
 80009cc:	430a      	orrs	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_MspInit+0x128>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	029b      	lsls	r3, r3, #10
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_2_Pin|RX_2_Pin;
 80009de:	211c      	movs	r1, #28
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2203      	movs	r2, #3
 80009f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	187a      	adds	r2, r7, r1
 8000a00:	2390      	movs	r3, #144	; 0x90
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fa5e 	bl	8000ec8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	201c      	movs	r0, #28
 8000a12:	f000 f9a9 	bl	8000d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a16:	201c      	movs	r0, #28
 8000a18:	f000 f9bb 	bl	8000d92 <HAL_NVIC_EnableIRQ>
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b00d      	add	sp, #52	; 0x34
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	40013800 	.word	0x40013800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40004400 	.word	0x40004400

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f89c 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <USART1_IRQHandler+0x20>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f001 fc46 	bl	80022f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, (uint16_t) RX_BUFFER_SIZE);
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	005a      	lsls	r2, r3, #1
 8000a70:	4904      	ldr	r1, [pc, #16]	; (8000a84 <USART1_IRQHandler+0x24>)
 8000a72:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <USART1_IRQHandler+0x20>)
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 fbee 	bl	8002256 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200001bc 	.word	0x200001bc
 8000a84:	20000070 	.word	0x20000070

08000a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <USART2_IRQHandler+0x14>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 fc32 	bl	80022f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	200002a4 	.word	0x200002a4

08000aa0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	; (8000aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ad6:	f7ff ffe3 	bl	8000aa0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ada:	f002 fa95 	bl	8003008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff fb9f 	bl	8000220 <main>

08000ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   r0, =_estack
 8000ae4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000af0:	080030b8 	.word	0x080030b8
  ldr r2, =_sbss
 8000af4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000af8:	2000032c 	.word	0x2000032c

08000afc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_IRQHandler>
	...

08000b00 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_Init+0x24>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_Init+0x24>)
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f000 f809 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b16:	f7ff fe35 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_InitTick+0x5c>)
 8000b32:	681c      	ldr	r4, [r3, #0]
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_InitTick+0x60>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	0019      	movs	r1, r3
 8000b3a:	23fa      	movs	r3, #250	; 0xfa
 8000b3c:	0098      	lsls	r0, r3, #2
 8000b3e:	f7ff fae3 	bl	8000108 <__udivsi3>
 8000b42:	0003      	movs	r3, r0
 8000b44:	0019      	movs	r1, r3
 8000b46:	0020      	movs	r0, r4
 8000b48:	f7ff fade 	bl	8000108 <__udivsi3>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 f92f 	bl	8000db2 <HAL_SYSTICK_Config>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e00f      	b.n	8000b7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d80b      	bhi.n	8000b7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	2301      	movs	r3, #1
 8000b66:	425b      	negs	r3, r3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 f8fc 	bl	8000d68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_InitTick+0x64>)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b003      	add	sp, #12
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	20000044 	.word	0x20000044
 8000b88:	2000004c 	.word	0x2000004c
 8000b8c:	20000048 	.word	0x20000048

08000b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x1c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	001a      	movs	r2, r3
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	18d2      	adds	r2, r2, r3
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_IncTick+0x20>)
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	2000004c 	.word	0x2000004c
 8000bb0:	20000328 	.word	0x20000328

08000bb4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <HAL_GetTick+0x10>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000328 	.word	0x20000328

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff fff0 	bl	8000bb4 <HAL_GetTick>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_Delay+0x44>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	001a      	movs	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	189b      	adds	r3, r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	f7ff ffe0 	bl	8000bb4 <HAL_GetTick>
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	2000004c 	.word	0x2000004c

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b7f      	cmp	r3, #127	; 0x7f
 8000c22:	d809      	bhi.n	8000c38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	001a      	movs	r2, r3
 8000c2a:	231f      	movs	r3, #31
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <__NVIC_EnableIRQ+0x30>)
 8000c30:	2101      	movs	r1, #1
 8000c32:	4091      	lsls	r1, r2
 8000c34:	000a      	movs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]
  }
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b7f      	cmp	r3, #127	; 0x7f
 8000c58:	d828      	bhi.n	8000cac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5a:	4a2f      	ldr	r2, [pc, #188]	; (8000d18 <__NVIC_SetPriority+0xd4>)
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	33c0      	adds	r3, #192	; 0xc0
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	589b      	ldr	r3, [r3, r2]
 8000c6a:	1dfa      	adds	r2, r7, #7
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	0011      	movs	r1, r2
 8000c70:	2203      	movs	r2, #3
 8000c72:	400a      	ands	r2, r1
 8000c74:	00d2      	lsls	r2, r2, #3
 8000c76:	21ff      	movs	r1, #255	; 0xff
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	43d2      	mvns	r2, r2
 8000c7e:	401a      	ands	r2, r3
 8000c80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	401a      	ands	r2, r3
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2303      	movs	r3, #3
 8000c92:	4003      	ands	r3, r0
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c98:	481f      	ldr	r0, [pc, #124]	; (8000d18 <__NVIC_SetPriority+0xd4>)
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	33c0      	adds	r3, #192	; 0xc0
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000caa:	e031      	b.n	8000d10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <__NVIC_SetPriority+0xd8>)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	400b      	ands	r3, r1
 8000cb8:	3b08      	subs	r3, #8
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3306      	adds	r3, #6
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	1dfa      	adds	r2, r7, #7
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	0011      	movs	r1, r2
 8000ccc:	2203      	movs	r2, #3
 8000cce:	400a      	ands	r2, r1
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	21ff      	movs	r1, #255	; 0xff
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	43d2      	mvns	r2, r2
 8000cda:	401a      	ands	r2, r3
 8000cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	019b      	lsls	r3, r3, #6
 8000ce2:	22ff      	movs	r2, #255	; 0xff
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	0018      	movs	r0, r3
 8000cec:	2303      	movs	r3, #3
 8000cee:	4003      	ands	r3, r0
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <__NVIC_SetPriority+0xd8>)
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	001c      	movs	r4, r3
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	4023      	ands	r3, r4
 8000d00:	3b08      	subs	r3, #8
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	430a      	orrs	r2, r1
 8000d06:	3306      	adds	r3, #6
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	18c3      	adds	r3, r0, r3
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	601a      	str	r2, [r3, #0]
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b003      	add	sp, #12
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	1e5a      	subs	r2, r3, #1
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	045b      	lsls	r3, r3, #17
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d301      	bcc.n	8000d38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d34:	2301      	movs	r3, #1
 8000d36:	e010      	b.n	8000d5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <SysTick_Config+0x44>)
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d40:	2301      	movs	r3, #1
 8000d42:	425b      	negs	r3, r3
 8000d44:	2103      	movs	r1, #3
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ff7c 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x44>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x44>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	210f      	movs	r1, #15
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	1c02      	adds	r2, r0, #0
 8000d78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b004      	add	sp, #16
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	0002      	movs	r2, r0
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff ff33 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff ffaf 	bl	8000d20 <SysTick_Config>
 8000dc2:	0003      	movs	r3, r0
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2221      	movs	r2, #33	; 0x21
 8000dd8:	5c9b      	ldrb	r3, [r3, r2]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d008      	beq.n	8000df2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2220      	movs	r2, #32
 8000dea:	2100      	movs	r1, #0
 8000dec:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e020      	b.n	8000e34 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	210e      	movs	r1, #14
 8000dfe:	438a      	bics	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	438a      	bics	r2, r1
 8000e10:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4091      	lsls	r1, r2
 8000e1e:	000a      	movs	r2, r1
 8000e20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2221      	movs	r2, #33	; 0x21
 8000e26:	2101      	movs	r1, #1
 8000e28:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	2100      	movs	r1, #0
 8000e30:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e44:	210f      	movs	r1, #15
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2221      	movs	r2, #33	; 0x21
 8000e50:	5c9b      	ldrb	r3, [r3, r2]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d006      	beq.n	8000e66 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
 8000e64:	e028      	b.n	8000eb8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	210e      	movs	r1, #14
 8000e72:	438a      	bics	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	438a      	bics	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4091      	lsls	r1, r2
 8000e92:	000a      	movs	r2, r1
 8000e94:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2221      	movs	r2, #33	; 0x21
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d004      	beq.n	8000eb8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	0010      	movs	r0, r2
 8000eb6:	4798      	blx	r3
    } 
  }
  return status;
 8000eb8:	230f      	movs	r3, #15
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	781b      	ldrb	r3, [r3, #0]
}
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed6:	e14f      	b.n	8001178 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	000a      	movs	r2, r1
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d100      	bne.n	8000ef0 <HAL_GPIO_Init+0x28>
 8000eee:	e140      	b.n	8001172 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d00b      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d007      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	2b11      	cmp	r3, #17
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b12      	cmp	r3, #18
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0xea>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d123      	bne.n	8000ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	58d3      	ldr	r3, [r2, r3]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2107      	movs	r1, #7
 8000fde:	400b      	ands	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	6939      	ldr	r1, [r7, #16]
 8000ff8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	43da      	mvns	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	401a      	ands	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	409a      	lsls	r2, r3
 8001020:	0013      	movs	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	055b      	lsls	r3, r3, #21
 8001036:	4013      	ands	r3, r2
 8001038:	d100      	bne.n	800103c <HAL_GPIO_Init+0x174>
 800103a:	e09a      	b.n	8001172 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103c:	4b54      	ldr	r3, [pc, #336]	; (8001190 <HAL_GPIO_Init+0x2c8>)
 800103e:	699a      	ldr	r2, [r3, #24]
 8001040:	4b53      	ldr	r3, [pc, #332]	; (8001190 <HAL_GPIO_Init+0x2c8>)
 8001042:	2101      	movs	r1, #1
 8001044:	430a      	orrs	r2, r1
 8001046:	619a      	str	r2, [r3, #24]
 8001048:	4b51      	ldr	r3, [pc, #324]	; (8001190 <HAL_GPIO_Init+0x2c8>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	2201      	movs	r2, #1
 800104e:	4013      	ands	r3, r2
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001054:	4a4f      	ldr	r2, [pc, #316]	; (8001194 <HAL_GPIO_Init+0x2cc>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	589b      	ldr	r3, [r3, r2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2203      	movs	r2, #3
 8001066:	4013      	ands	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	43da      	mvns	r2, r3
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	2390      	movs	r3, #144	; 0x90
 800107c:	05db      	lsls	r3, r3, #23
 800107e:	429a      	cmp	r2, r3
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x1e2>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a44      	ldr	r2, [pc, #272]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x1de>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a43      	ldr	r2, [pc, #268]	; (800119c <HAL_GPIO_Init+0x2d4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x1da>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <HAL_GPIO_Init+0x2d8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x1d6>
 800109a:	2303      	movs	r3, #3
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x1e4>
 800109e:	2305      	movs	r3, #5
 80010a0:	e004      	b.n	80010ac <HAL_GPIO_Init+0x1e4>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x1e4>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x1e4>
 80010aa:	2300      	movs	r3, #0
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	2103      	movs	r1, #3
 80010b0:	400a      	ands	r2, r1
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	4093      	lsls	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010bc:	4935      	ldr	r1, [pc, #212]	; (8001194 <HAL_GPIO_Init+0x2cc>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ca:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <HAL_GPIO_Init+0x2dc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	025b      	lsls	r3, r3, #9
 80010e2:	4013      	ands	r3, r2
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ee:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_GPIO_Init+0x2dc>)
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_GPIO_Init+0x2dc>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43da      	mvns	r2, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	029b      	lsls	r3, r3, #10
 800110c:	4013      	ands	r3, r2
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_GPIO_Init+0x2dc>)
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <HAL_GPIO_Init+0x2dc>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	035b      	lsls	r3, r3, #13
 8001136:	4013      	ands	r3, r2
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_GPIO_Init+0x2dc>)
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_GPIO_Init+0x2dc>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	039b      	lsls	r3, r3, #14
 8001160:	4013      	ands	r3, r2
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_GPIO_Init+0x2dc>)
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	40da      	lsrs	r2, r3
 8001180:	1e13      	subs	r3, r2, #0
 8001182:	d000      	beq.n	8001186 <HAL_GPIO_Init+0x2be>
 8001184:	e6a8      	b.n	8000ed8 <HAL_GPIO_Init+0x10>
  } 
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b006      	add	sp, #24
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000
 8001194:	40010000 	.word	0x40010000
 8001198:	48000400 	.word	0x48000400
 800119c:	48000800 	.word	0x48000800
 80011a0:	48000c00 	.word	0x48000c00
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	000a      	movs	r2, r1
 80011b2:	1cbb      	adds	r3, r7, #2
 80011b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	1cba      	adds	r2, r7, #2
 80011bc:	8812      	ldrh	r2, [r2, #0]
 80011be:	4013      	ands	r3, r2
 80011c0:	d004      	beq.n	80011cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011c2:	230f      	movs	r3, #15
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e003      	b.n	80011d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011d4:	230f      	movs	r3, #15
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	781b      	ldrb	r3, [r3, #0]
  }
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	0008      	movs	r0, r1
 80011ec:	0011      	movs	r1, r2
 80011ee:	1cbb      	adds	r3, r7, #2
 80011f0:	1c02      	adds	r2, r0, #0
 80011f2:	801a      	strh	r2, [r3, #0]
 80011f4:	1c7b      	adds	r3, r7, #1
 80011f6:	1c0a      	adds	r2, r1, #0
 80011f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011fa:	1c7b      	adds	r3, r7, #1
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001202:	1cbb      	adds	r3, r7, #2
 8001204:	881a      	ldrh	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800120a:	e003      	b.n	8001214 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120c:	1cbb      	adds	r3, r7, #2
 800120e:	881a      	ldrh	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e082      	b.n	8001334 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2241      	movs	r2, #65	; 0x41
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d107      	bne.n	800124a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2240      	movs	r2, #64	; 0x40
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff fac1 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2241      	movs	r2, #65	; 0x41
 800124e:	2124      	movs	r1, #36	; 0x24
 8001250:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	438a      	bics	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4934      	ldr	r1, [pc, #208]	; (800133c <HAL_I2C_Init+0x120>)
 800126c:	400a      	ands	r2, r1
 800126e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4931      	ldr	r1, [pc, #196]	; (8001340 <HAL_I2C_Init+0x124>)
 800127c:	400a      	ands	r2, r1
 800127e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d108      	bne.n	800129a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0209      	lsls	r1, r1, #8
 8001294:	430a      	orrs	r2, r1
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e007      	b.n	80012aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2184      	movs	r1, #132	; 0x84
 80012a4:	0209      	lsls	r1, r1, #8
 80012a6:	430a      	orrs	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d104      	bne.n	80012bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2280      	movs	r2, #128	; 0x80
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	491f      	ldr	r1, [pc, #124]	; (8001344 <HAL_I2C_Init+0x128>)
 80012c8:	430a      	orrs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	491a      	ldr	r1, [pc, #104]	; (8001340 <HAL_I2C_Init+0x124>)
 80012d8:	400a      	ands	r2, r1
 80012da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	0011      	movs	r1, r2
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	021a      	lsls	r2, r3, #8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69d9      	ldr	r1, [r3, #28]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2241      	movs	r2, #65	; 0x41
 8001320:	2120      	movs	r1, #32
 8001322:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2242      	movs	r2, #66	; 0x42
 800132e:	2100      	movs	r1, #0
 8001330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}
 800133c:	f0ffffff 	.word	0xf0ffffff
 8001340:	ffff7fff 	.word	0xffff7fff
 8001344:	02008000 	.word	0x02008000

08001348 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2241      	movs	r2, #65	; 0x41
 8001356:	5c9b      	ldrb	r3, [r3, r2]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b20      	cmp	r3, #32
 800135c:	d138      	bne.n	80013d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2240      	movs	r2, #64	; 0x40
 8001362:	5c9b      	ldrb	r3, [r3, r2]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001368:	2302      	movs	r3, #2
 800136a:	e032      	b.n	80013d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2240      	movs	r2, #64	; 0x40
 8001370:	2101      	movs	r1, #1
 8001372:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2241      	movs	r2, #65	; 0x41
 8001378:	2124      	movs	r1, #36	; 0x24
 800137a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2101      	movs	r1, #1
 8001388:	438a      	bics	r2, r1
 800138a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4911      	ldr	r1, [pc, #68]	; (80013dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001398:	400a      	ands	r2, r1
 800139a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2101      	movs	r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2241      	movs	r2, #65	; 0x41
 80013c0:	2120      	movs	r1, #32
 80013c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2240      	movs	r2, #64	; 0x40
 80013c8:	2100      	movs	r1, #0
 80013ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e000      	b.n	80013d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013d0:	2302      	movs	r3, #2
  }
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	ffffefff 	.word	0xffffefff

080013e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2241      	movs	r2, #65	; 0x41
 80013ee:	5c9b      	ldrb	r3, [r3, r2]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	d139      	bne.n	800146a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2240      	movs	r2, #64	; 0x40
 80013fa:	5c9b      	ldrb	r3, [r3, r2]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001400:	2302      	movs	r3, #2
 8001402:	e033      	b.n	800146c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2240      	movs	r2, #64	; 0x40
 8001408:	2101      	movs	r1, #1
 800140a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2241      	movs	r2, #65	; 0x41
 8001410:	2124      	movs	r1, #36	; 0x24
 8001412:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2101      	movs	r1, #1
 8001420:	438a      	bics	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2241      	movs	r2, #65	; 0x41
 800145a:	2120      	movs	r1, #32
 800145c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	2100      	movs	r1, #0
 8001464:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800146a:	2302      	movs	r3, #2
  }
}
 800146c:	0018      	movs	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	b004      	add	sp, #16
 8001472:	bd80      	pop	{r7, pc}
 8001474:	fffff0ff 	.word	0xfffff0ff

08001478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e301      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2201      	movs	r2, #1
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCC_OscConfig+0x1e>
 8001494:	e08d      	b.n	80015b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001496:	4bc3      	ldr	r3, [pc, #780]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	220c      	movs	r2, #12
 800149c:	4013      	ands	r3, r2
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d00e      	beq.n	80014c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a2:	4bc0      	ldr	r3, [pc, #768]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	220c      	movs	r2, #12
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x64>
 80014ae:	4bbd      	ldr	r3, [pc, #756]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	401a      	ands	r2, r3
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	025b      	lsls	r3, r3, #9
 80014bc:	429a      	cmp	r2, r3
 80014be:	d10d      	bne.n	80014dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	4bb8      	ldr	r3, [pc, #736]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	029b      	lsls	r3, r3, #10
 80014c8:	4013      	ands	r3, r2
 80014ca:	d100      	bne.n	80014ce <HAL_RCC_OscConfig+0x56>
 80014cc:	e070      	b.n	80015b0 <HAL_RCC_OscConfig+0x138>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d000      	beq.n	80014d8 <HAL_RCC_OscConfig+0x60>
 80014d6:	e06b      	b.n	80015b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e2d8      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d107      	bne.n	80014f4 <HAL_RCC_OscConfig+0x7c>
 80014e4:	4baf      	ldr	r3, [pc, #700]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4bae      	ldr	r3, [pc, #696]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	0249      	lsls	r1, r1, #9
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e02f      	b.n	8001554 <HAL_RCC_OscConfig+0xdc>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10c      	bne.n	8001516 <HAL_RCC_OscConfig+0x9e>
 80014fc:	4ba9      	ldr	r3, [pc, #676]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4ba8      	ldr	r3, [pc, #672]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001502:	49a9      	ldr	r1, [pc, #676]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 8001504:	400a      	ands	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	4ba6      	ldr	r3, [pc, #664]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4ba5      	ldr	r3, [pc, #660]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800150e:	49a7      	ldr	r1, [pc, #668]	; (80017ac <HAL_RCC_OscConfig+0x334>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e01e      	b.n	8001554 <HAL_RCC_OscConfig+0xdc>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d10e      	bne.n	800153c <HAL_RCC_OscConfig+0xc4>
 800151e:	4ba1      	ldr	r3, [pc, #644]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4ba0      	ldr	r3, [pc, #640]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	02c9      	lsls	r1, r1, #11
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	4b9d      	ldr	r3, [pc, #628]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b9c      	ldr	r3, [pc, #624]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001532:	2180      	movs	r1, #128	; 0x80
 8001534:	0249      	lsls	r1, r1, #9
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xdc>
 800153c:	4b99      	ldr	r3, [pc, #612]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b98      	ldr	r3, [pc, #608]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001542:	4999      	ldr	r1, [pc, #612]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 8001544:	400a      	ands	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	4b96      	ldr	r3, [pc, #600]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b95      	ldr	r3, [pc, #596]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800154e:	4997      	ldr	r1, [pc, #604]	; (80017ac <HAL_RCC_OscConfig+0x334>)
 8001550:	400a      	ands	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d014      	beq.n	8001586 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fb2a 	bl	8000bb4 <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001566:	f7ff fb25 	bl	8000bb4 <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e28a      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001578:	4b8a      	ldr	r3, [pc, #552]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	029b      	lsls	r3, r3, #10
 8001580:	4013      	ands	r3, r2
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0xee>
 8001584:	e015      	b.n	80015b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fb15 	bl	8000bb4 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fb10 	bl	8000bb4 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e275      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	4013      	ands	r3, r2
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x118>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2202      	movs	r2, #2
 80015b8:	4013      	ands	r3, r2
 80015ba:	d100      	bne.n	80015be <HAL_RCC_OscConfig+0x146>
 80015bc:	e069      	b.n	8001692 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015be:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	220c      	movs	r2, #12
 80015c4:	4013      	ands	r3, r2
 80015c6:	d00b      	beq.n	80015e0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015c8:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	220c      	movs	r2, #12
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d11c      	bne.n	800160e <HAL_RCC_OscConfig+0x196>
 80015d4:	4b73      	ldr	r3, [pc, #460]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	4013      	ands	r3, r2
 80015de:	d116      	bne.n	800160e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e0:	4b70      	ldr	r3, [pc, #448]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2202      	movs	r2, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x17e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e24b      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b6b      	ldr	r3, [pc, #428]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	22f8      	movs	r2, #248	; 0xf8
 80015fc:	4393      	bics	r3, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	00da      	lsls	r2, r3, #3
 8001606:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160c:	e041      	b.n	8001692 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d024      	beq.n	8001660 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800161c:	2101      	movs	r1, #1
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7ff fac7 	bl	8000bb4 <HAL_GetTick>
 8001626:	0003      	movs	r3, r0
 8001628:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162c:	f7ff fac2 	bl	8000bb4 <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e227      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d0f1      	beq.n	800162c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b56      	ldr	r3, [pc, #344]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	22f8      	movs	r2, #248	; 0xf8
 800164e:	4393      	bics	r3, r2
 8001650:	0019      	movs	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	00da      	lsls	r2, r3, #3
 8001658:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e018      	b.n	8001692 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001666:	2101      	movs	r1, #1
 8001668:	438a      	bics	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff faa2 	bl	8000bb4 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fa9d 	bl	8000bb4 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e202      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001688:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2202      	movs	r2, #2
 800168e:	4013      	ands	r3, r2
 8001690:	d1f1      	bne.n	8001676 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2208      	movs	r2, #8
 8001698:	4013      	ands	r3, r2
 800169a:	d036      	beq.n	800170a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d019      	beq.n	80016d8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a4:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a8:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	430a      	orrs	r2, r1
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fa80 	bl	8000bb4 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ba:	f7ff fa7b 	bl	8000bb4 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e1e0      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016cc:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2202      	movs	r2, #2
 80016d2:	4013      	ands	r3, r2
 80016d4:	d0f1      	beq.n	80016ba <HAL_RCC_OscConfig+0x242>
 80016d6:	e018      	b.n	800170a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80016da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80016de:	2101      	movs	r1, #1
 80016e0:	438a      	bics	r2, r1
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fa66 	bl	8000bb4 <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ee:	f7ff fa61 	bl	8000bb4 <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e1c6      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d1f1      	bne.n	80016ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2204      	movs	r2, #4
 8001710:	4013      	ands	r3, r2
 8001712:	d100      	bne.n	8001716 <HAL_RCC_OscConfig+0x29e>
 8001714:	e0b4      	b.n	8001880 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001716:	201f      	movs	r0, #31
 8001718:	183b      	adds	r3, r7, r0
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001720:	69da      	ldr	r2, [r3, #28]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	055b      	lsls	r3, r3, #21
 8001726:	4013      	ands	r3, r2
 8001728:	d110      	bne.n	800174c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0549      	lsls	r1, r1, #21
 8001734:	430a      	orrs	r2, r1
 8001736:	61da      	str	r2, [r3, #28]
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	055b      	lsls	r3, r3, #21
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001746:	183b      	adds	r3, r7, r0
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_RCC_OscConfig+0x338>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4013      	ands	r3, r2
 8001756:	d11a      	bne.n	800178e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_RCC_OscConfig+0x338>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_RCC_OscConfig+0x338>)
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	0049      	lsls	r1, r1, #1
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff fa25 	bl	8000bb4 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001770:	f7ff fa20 	bl	8000bb4 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e185      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x338>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4013      	ands	r3, r2
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d10e      	bne.n	80017b4 <HAL_RCC_OscConfig+0x33c>
 8001796:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001798:	6a1a      	ldr	r2, [r3, #32]
 800179a:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800179c:	2101      	movs	r1, #1
 800179e:	430a      	orrs	r2, r1
 80017a0:	621a      	str	r2, [r3, #32]
 80017a2:	e035      	b.n	8001810 <HAL_RCC_OscConfig+0x398>
 80017a4:	40021000 	.word	0x40021000
 80017a8:	fffeffff 	.word	0xfffeffff
 80017ac:	fffbffff 	.word	0xfffbffff
 80017b0:	40007000 	.word	0x40007000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x35e>
 80017bc:	4bb6      	ldr	r3, [pc, #728]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017be:	6a1a      	ldr	r2, [r3, #32]
 80017c0:	4bb5      	ldr	r3, [pc, #724]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	438a      	bics	r2, r1
 80017c6:	621a      	str	r2, [r3, #32]
 80017c8:	4bb3      	ldr	r3, [pc, #716]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017ca:	6a1a      	ldr	r2, [r3, #32]
 80017cc:	4bb2      	ldr	r3, [pc, #712]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017ce:	2104      	movs	r1, #4
 80017d0:	438a      	bics	r2, r1
 80017d2:	621a      	str	r2, [r3, #32]
 80017d4:	e01c      	b.n	8001810 <HAL_RCC_OscConfig+0x398>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x380>
 80017de:	4bae      	ldr	r3, [pc, #696]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017e0:	6a1a      	ldr	r2, [r3, #32]
 80017e2:	4bad      	ldr	r3, [pc, #692]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017e4:	2104      	movs	r1, #4
 80017e6:	430a      	orrs	r2, r1
 80017e8:	621a      	str	r2, [r3, #32]
 80017ea:	4bab      	ldr	r3, [pc, #684]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	4baa      	ldr	r3, [pc, #680]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	430a      	orrs	r2, r1
 80017f4:	621a      	str	r2, [r3, #32]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0x398>
 80017f8:	4ba7      	ldr	r3, [pc, #668]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017fa:	6a1a      	ldr	r2, [r3, #32]
 80017fc:	4ba6      	ldr	r3, [pc, #664]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017fe:	2101      	movs	r1, #1
 8001800:	438a      	bics	r2, r1
 8001802:	621a      	str	r2, [r3, #32]
 8001804:	4ba4      	ldr	r3, [pc, #656]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001806:	6a1a      	ldr	r2, [r3, #32]
 8001808:	4ba3      	ldr	r3, [pc, #652]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800180a:	2104      	movs	r1, #4
 800180c:	438a      	bics	r2, r1
 800180e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d014      	beq.n	8001842 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff f9cc 	bl	8000bb4 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001820:	e009      	b.n	8001836 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff f9c7 	bl	8000bb4 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	4a9b      	ldr	r2, [pc, #620]	; (8001a9c <HAL_RCC_OscConfig+0x624>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e12b      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001836:	4b98      	ldr	r3, [pc, #608]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	2202      	movs	r2, #2
 800183c:	4013      	ands	r3, r2
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x3aa>
 8001840:	e013      	b.n	800186a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff f9b7 	bl	8000bb4 <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184a:	e009      	b.n	8001860 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff f9b2 	bl	8000bb4 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4a91      	ldr	r2, [pc, #580]	; (8001a9c <HAL_RCC_OscConfig+0x624>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e116      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001860:	4b8d      	ldr	r3, [pc, #564]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	2202      	movs	r2, #2
 8001866:	4013      	ands	r3, r2
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800186a:	231f      	movs	r3, #31
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001874:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	4b87      	ldr	r3, [pc, #540]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800187a:	4989      	ldr	r1, [pc, #548]	; (8001aa0 <HAL_RCC_OscConfig+0x628>)
 800187c:	400a      	ands	r2, r1
 800187e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2210      	movs	r2, #16
 8001886:	4013      	ands	r3, r2
 8001888:	d063      	beq.n	8001952 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d12a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	4b80      	ldr	r3, [pc, #512]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001898:	2104      	movs	r1, #4
 800189a:	430a      	orrs	r2, r1
 800189c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800189e:	4b7e      	ldr	r3, [pc, #504]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a2:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff f983 	bl	8000bb4 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018b4:	f7ff f97e 	bl	8000bb4 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e0e3      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018c6:	4b74      	ldr	r3, [pc, #464]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ca:	2202      	movs	r2, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	d0f1      	beq.n	80018b4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018d0:	4b71      	ldr	r3, [pc, #452]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d4:	22f8      	movs	r2, #248	; 0xf8
 80018d6:	4393      	bics	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	00da      	lsls	r2, r3, #3
 80018e0:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	635a      	str	r2, [r3, #52]	; 0x34
 80018e6:	e034      	b.n	8001952 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	3305      	adds	r3, #5
 80018ee:	d111      	bne.n	8001914 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018f0:	4b69      	ldr	r3, [pc, #420]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f4:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018f6:	2104      	movs	r1, #4
 80018f8:	438a      	bics	r2, r1
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	22f8      	movs	r2, #248	; 0xf8
 8001902:	4393      	bics	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	00da      	lsls	r2, r3, #3
 800190c:	4b62      	ldr	r3, [pc, #392]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800190e:	430a      	orrs	r2, r1
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
 8001912:	e01e      	b.n	8001952 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001914:	4b60      	ldr	r3, [pc, #384]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001918:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800191a:	2104      	movs	r1, #4
 800191c:	430a      	orrs	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001920:	4b5d      	ldr	r3, [pc, #372]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001924:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001926:	2101      	movs	r1, #1
 8001928:	438a      	bics	r2, r1
 800192a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff f942 	bl	8000bb4 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001936:	f7ff f93d 	bl	8000bb4 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0a2      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001948:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d1f1      	bne.n	8001936 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d100      	bne.n	800195c <HAL_RCC_OscConfig+0x4e4>
 800195a:	e097      	b.n	8001a8c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195c:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	220c      	movs	r2, #12
 8001962:	4013      	ands	r3, r2
 8001964:	2b08      	cmp	r3, #8
 8001966:	d100      	bne.n	800196a <HAL_RCC_OscConfig+0x4f2>
 8001968:	e06b      	b.n	8001a42 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d14c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b48      	ldr	r3, [pc, #288]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001978:	494a      	ldr	r1, [pc, #296]	; (8001aa4 <HAL_RCC_OscConfig+0x62c>)
 800197a:	400a      	ands	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff f919 	bl	8000bb4 <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f914 	bl	8000bb4 <HAL_GetTick>
 800198c:	0002      	movs	r2, r0
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e079      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	049b      	lsls	r3, r3, #18
 80019a2:	4013      	ands	r3, r2
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a6:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	220f      	movs	r2, #15
 80019ac:	4393      	bics	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019b6:	430a      	orrs	r2, r1
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a3a      	ldr	r2, [pc, #232]	; (8001aa8 <HAL_RCC_OscConfig+0x630>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	431a      	orrs	r2, r3
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	0449      	lsls	r1, r1, #17
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff f8e7 	bl	8000bb4 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f8e2 	bl	8000bb4 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e047      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	049b      	lsls	r3, r3, #18
 8001a06:	4013      	ands	r3, r2
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x574>
 8001a0a:	e03f      	b.n	8001a8c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a12:	4924      	ldr	r1, [pc, #144]	; (8001aa4 <HAL_RCC_OscConfig+0x62c>)
 8001a14:	400a      	ands	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff f8cc 	bl	8000bb4 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f8c7 	bl	8000bb4 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e02c      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	049b      	lsls	r3, r3, #18
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x5aa>
 8001a40:	e024      	b.n	8001a8c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e01f      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	025b      	lsls	r3, r3, #9
 8001a60:	401a      	ands	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d10e      	bne.n	8001a88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	23f0      	movs	r3, #240	; 0xf0
 8001a7c:	039b      	lsls	r3, r3, #14
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b008      	add	sp, #32
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	00001388 	.word	0x00001388
 8001aa0:	efffffff 	.word	0xefffffff
 8001aa4:	feffffff 	.word	0xfeffffff
 8001aa8:	ffc2ffff 	.word	0xffc2ffff

08001aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0b3      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d911      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4393      	bics	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae0:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e09a      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2202      	movs	r2, #2
 8001af8:	4013      	ands	r3, r2
 8001afa:	d015      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2204      	movs	r2, #4
 8001b02:	4013      	ands	r3, r2
 8001b04:	d006      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b06:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b0c:	21e0      	movs	r1, #224	; 0xe0
 8001b0e:	00c9      	lsls	r1, r1, #3
 8001b10:	430a      	orrs	r2, r1
 8001b12:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	22f0      	movs	r2, #240	; 0xf0
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b24:	430a      	orrs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d040      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	029b      	lsls	r3, r3, #10
 8001b42:	4013      	ands	r3, r2
 8001b44:	d114      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06e      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	049b      	lsls	r3, r3, #18
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d108      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e062      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e05b      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2203      	movs	r2, #3
 8001b76:	4393      	bics	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7ff f816 	bl	8000bb4 <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8c:	e009      	b.n	8001ba2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8e:	f7ff f811 	bl	8000bb4 <HAL_GetTick>
 8001b92:	0002      	movs	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	4a27      	ldr	r2, [pc, #156]	; (8001c38 <HAL_RCC_ClockConfig+0x18c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e042      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	401a      	ands	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1ec      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d211      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e020      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2204      	movs	r2, #4
 8001bec:	4013      	ands	r3, r2
 8001bee:	d009      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <HAL_RCC_ClockConfig+0x190>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001c00:	430a      	orrs	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c04:	f000 f820 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001c08:	0001      	movs	r1, r0
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	220f      	movs	r2, #15
 8001c12:	4013      	ands	r3, r2
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x194>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	000a      	movs	r2, r1
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x198>)
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7fe ff81 	bl	8000b28 <HAL_InitTick>
  
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b004      	add	sp, #16
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	00001388 	.word	0x00001388
 8001c3c:	fffff8ff 	.word	0xfffff8ff
 8001c40:	08003098 	.word	0x08003098
 8001c44:	20000044 	.word	0x20000044

08001c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b08f      	sub	sp, #60	; 0x3c
 8001c4c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c4e:	2314      	movs	r3, #20
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c56:	c313      	stmia	r3!, {r0, r1, r4}
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c62:	c313      	stmia	r3!, {r0, r1, r4}
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	220c      	movs	r2, #12
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d002      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x4a>
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d003      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x50>
 8001c90:	e02d      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c96:	e02d      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9a:	0c9b      	lsrs	r3, r3, #18
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2214      	movs	r2, #20
 8001ca2:	18ba      	adds	r2, r7, r2
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ca8:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	220f      	movs	r2, #15
 8001cae:	4013      	ands	r3, r2
 8001cb0:	1d3a      	adds	r2, r7, #4
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	025b      	lsls	r3, r3, #9
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d009      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cc2:	4812      	ldr	r0, [pc, #72]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cc4:	f7fe fa20 	bl	8000108 <__udivsi3>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	001a      	movs	r2, r3
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	4353      	muls	r3, r2
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd2:	e009      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd6:	000a      	movs	r2, r1
 8001cd8:	0152      	lsls	r2, r2, #5
 8001cda:	1a52      	subs	r2, r2, r1
 8001cdc:	0193      	lsls	r3, r2, #6
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	185b      	adds	r3, r3, r1
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cec:	e002      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cf2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b00f      	add	sp, #60	; 0x3c
 8001cfc:	bd90      	pop	{r4, r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	08003078 	.word	0x08003078
 8001d04:	08003088 	.word	0x08003088
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	007a1200 	.word	0x007a1200

08001d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b02      	ldr	r3, [pc, #8]	; (8001d20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	20000044 	.word	0x20000044

08001d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d28:	f7ff fff2 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d2c:	0001      	movs	r1, r0
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	2207      	movs	r2, #7
 8001d36:	4013      	ands	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	40d9      	lsrs	r1, r3
 8001d3e:	000b      	movs	r3, r1
}    
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	080030a8 	.word	0x080030a8

08001d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	025b      	lsls	r3, r3, #9
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d100      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d6c:	e08e      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2017      	movs	r0, #23
 8001d70:	183b      	adds	r3, r7, r0
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	055b      	lsls	r3, r3, #21
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d110      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b54      	ldr	r3, [pc, #336]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d84:	69da      	ldr	r2, [r3, #28]
 8001d86:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	0549      	lsls	r1, r1, #21
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	61da      	str	r2, [r3, #28]
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	055b      	lsls	r3, r3, #21
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	183b      	adds	r3, r7, r0
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4013      	ands	r3, r2
 8001dae:	d11a      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db0:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b48      	ldr	r3, [pc, #288]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0049      	lsls	r1, r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe fef9 	bl	8000bb4 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	e008      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc8:	f7fe fef4 	bl	8000bb4 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e077      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001de8:	6a1a      	ldr	r2, [r3, #32]
 8001dea:	23c0      	movs	r3, #192	; 0xc0
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d034      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	23c0      	movs	r3, #192	; 0xc0
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d02c      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e08:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a33      	ldr	r2, [pc, #204]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e12:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e14:	6a1a      	ldr	r2, [r3, #32]
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	0249      	lsls	r1, r1, #9
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e26:	492e      	ldr	r1, [pc, #184]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e2c:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe febb 	bl	8000bb4 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e42:	e009      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7fe feb6 	bl	8000bb4 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e038      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e72:	430a      	orrs	r2, r1
 8001e74:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e76:	2317      	movs	r3, #23
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e86:	4918      	ldr	r1, [pc, #96]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	4393      	bics	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	2210      	movs	r2, #16
 8001eba:	4393      	bics	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b006      	add	sp, #24
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	fffffcff 	.word	0xfffffcff
 8001ee0:	fffeffff 	.word	0xfffeffff
 8001ee4:	00001388 	.word	0x00001388
 8001ee8:	efffffff 	.word	0xefffffff

08001eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0a8      	b.n	8002050 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	2382      	movs	r3, #130	; 0x82
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d009      	beq.n	8001f26 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	61da      	str	r2, [r3, #28]
 8001f18:	e005      	b.n	8001f26 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	225d      	movs	r2, #93	; 0x5d
 8001f30:	5c9b      	ldrb	r3, [r3, r2]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	225c      	movs	r2, #92	; 0x5c
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	0018      	movs	r0, r3
 8001f44:	f7fe fc90 	bl	8000868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	225d      	movs	r2, #93	; 0x5d
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	23e0      	movs	r3, #224	; 0xe0
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d902      	bls.n	8001f72 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e002      	b.n	8001f78 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	015b      	lsls	r3, r3, #5
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	23f0      	movs	r3, #240	; 0xf0
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d008      	beq.n	8001f96 <HAL_SPI_Init+0xaa>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	23e0      	movs	r3, #224	; 0xe0
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d002      	beq.n	8001f96 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	2382      	movs	r3, #130	; 0x82
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6899      	ldr	r1, [r3, #8]
 8001fa4:	2384      	movs	r3, #132	; 0x84
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	400b      	ands	r3, r1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2101      	movs	r1, #1
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6999      	ldr	r1, [r3, #24]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	400b      	ands	r3, r1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	2138      	movs	r1, #56	; 0x38
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	400b      	ands	r3, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	0011      	movs	r1, r2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	019b      	lsls	r3, r3, #6
 8001fea:	401a      	ands	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	2110      	movs	r1, #16
 8002004:	400b      	ands	r3, r1
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	2108      	movs	r1, #8
 800200e:	400b      	ands	r3, r1
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68d9      	ldr	r1, [r3, #12]
 8002016:	23f0      	movs	r3, #240	; 0xf0
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	400b      	ands	r3, r1
 800201c:	431a      	orrs	r2, r3
 800201e:	0011      	movs	r1, r2
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	015b      	lsls	r3, r3, #5
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4907      	ldr	r1, [pc, #28]	; (8002058 <HAL_SPI_Init+0x16c>)
 800203c:	400a      	ands	r2, r1
 800203e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	225d      	movs	r2, #93	; 0x5d
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b004      	add	sp, #16
 8002056:	bd80      	pop	{r7, pc}
 8002058:	fffff7ff 	.word	0xfffff7ff

0800205c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e044      	b.n	80020f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002072:	2b00      	cmp	r3, #0
 8002074:	d107      	bne.n	8002086 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2274      	movs	r2, #116	; 0x74
 800207a:	2100      	movs	r1, #0
 800207c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0018      	movs	r0, r3
 8002082:	f7fe fc3d 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2224      	movs	r2, #36	; 0x24
 800208a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2101      	movs	r1, #1
 8002098:	438a      	bics	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 fb34 	bl	800270c <UART_SetConfig>
 80020a4:	0003      	movs	r3, r0
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e024      	b.n	80020f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 fc67 	bl	800298c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	490d      	ldr	r1, [pc, #52]	; (8002100 <HAL_UART_Init+0xa4>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2108      	movs	r1, #8
 80020da:	438a      	bics	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 fcff 	bl	8002af4 <UART_CheckIdleState>
 80020f6:	0003      	movs	r3, r0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	fffff7ff 	.word	0xfffff7ff

08002104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	1dbb      	adds	r3, r7, #6
 8002112:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002118:	2b20      	cmp	r3, #32
 800211a:	d000      	beq.n	800211e <HAL_UART_Transmit+0x1a>
 800211c:	e096      	b.n	800224c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_UART_Transmit+0x28>
 8002124:	1dbb      	adds	r3, r7, #6
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e08e      	b.n	800224e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	015b      	lsls	r3, r3, #5
 8002138:	429a      	cmp	r2, r3
 800213a:	d109      	bne.n	8002150 <HAL_UART_Transmit+0x4c>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2201      	movs	r2, #1
 8002148:	4013      	ands	r3, r2
 800214a:	d001      	beq.n	8002150 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e07e      	b.n	800224e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2274      	movs	r2, #116	; 0x74
 8002154:	5c9b      	ldrb	r3, [r3, r2]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_UART_Transmit+0x5a>
 800215a:	2302      	movs	r3, #2
 800215c:	e077      	b.n	800224e <HAL_UART_Transmit+0x14a>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2274      	movs	r2, #116	; 0x74
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	2100      	movs	r1, #0
 800216c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2221      	movs	r2, #33	; 0x21
 8002172:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002174:	f7fe fd1e 	bl	8000bb4 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1dba      	adds	r2, r7, #6
 8002180:	2150      	movs	r1, #80	; 0x50
 8002182:	8812      	ldrh	r2, [r2, #0]
 8002184:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1dba      	adds	r2, r7, #6
 800218a:	2152      	movs	r1, #82	; 0x52
 800218c:	8812      	ldrh	r2, [r2, #0]
 800218e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	015b      	lsls	r3, r3, #5
 8002198:	429a      	cmp	r2, r3
 800219a:	d108      	bne.n	80021ae <HAL_UART_Transmit+0xaa>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d104      	bne.n	80021ae <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	e003      	b.n	80021b6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2274      	movs	r2, #116	; 0x74
 80021ba:	2100      	movs	r1, #0
 80021bc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80021be:	e02d      	b.n	800221c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	0013      	movs	r3, r2
 80021ca:	2200      	movs	r2, #0
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	f000 fcd9 	bl	8002b84 <UART_WaitOnFlagUntilTimeout>
 80021d2:	1e03      	subs	r3, r0, #0
 80021d4:	d001      	beq.n	80021da <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e039      	b.n	800224e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	881a      	ldrh	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	05d2      	lsls	r2, r2, #23
 80021ea:	0dd2      	lsrs	r2, r2, #23
 80021ec:	b292      	uxth	r2, r2
 80021ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	3302      	adds	r3, #2
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	e008      	b.n	800220a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	b292      	uxth	r2, r2
 8002202:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	3301      	adds	r3, #1
 8002208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2252      	movs	r2, #82	; 0x52
 800220e:	5a9b      	ldrh	r3, [r3, r2]
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b299      	uxth	r1, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2252      	movs	r2, #82	; 0x52
 800221a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2252      	movs	r2, #82	; 0x52
 8002220:	5a9b      	ldrh	r3, [r3, r2]
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1cb      	bne.n	80021c0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	0013      	movs	r3, r2
 8002232:	2200      	movs	r2, #0
 8002234:	2140      	movs	r1, #64	; 0x40
 8002236:	f000 fca5 	bl	8002b84 <UART_WaitOnFlagUntilTimeout>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d001      	beq.n	8002242 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e005      	b.n	800224e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800224c:	2302      	movs	r3, #2
  }
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b008      	add	sp, #32
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	1dbb      	adds	r3, r7, #6
 8002262:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002268:	2b20      	cmp	r3, #32
 800226a:	d13f      	bne.n	80022ec <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_UART_Receive_IT+0x24>
 8002272:	1dbb      	adds	r3, r7, #6
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e037      	b.n	80022ee <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	429a      	cmp	r2, r3
 8002288:	d109      	bne.n	800229e <HAL_UART_Receive_IT+0x48>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d105      	bne.n	800229e <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2201      	movs	r2, #1
 8002296:	4013      	ands	r3, r2
 8002298:	d001      	beq.n	800229e <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e027      	b.n	80022ee <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2274      	movs	r2, #116	; 0x74
 80022a2:	5c9b      	ldrb	r3, [r3, r2]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_UART_Receive_IT+0x56>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e020      	b.n	80022ee <HAL_UART_Receive_IT+0x98>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2274      	movs	r2, #116	; 0x74
 80022b0:	2101      	movs	r1, #1
 80022b2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	4013      	ands	r3, r2
 80022c6:	d008      	beq.n	80022da <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	04c9      	lsls	r1, r1, #19
 80022d6:	430a      	orrs	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80022da:	1dbb      	adds	r3, r7, #6
 80022dc:	881a      	ldrh	r2, [r3, #0]
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 fccc 	bl	8002c80 <UART_Start_Receive_IT>
 80022e8:	0003      	movs	r3, r0
 80022ea:	e000      	b.n	80022ee <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
  }
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4ab4      	ldr	r2, [pc, #720]	; (80025ec <HAL_UART_IRQHandler+0x2f4>)
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d112      	bne.n	800234c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2220      	movs	r2, #32
 800232a:	4013      	ands	r3, r2
 800232c:	d00e      	beq.n	800234c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2220      	movs	r2, #32
 8002332:	4013      	ands	r3, r2
 8002334:	d00a      	beq.n	800234c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800233a:	2b00      	cmp	r3, #0
 800233c:	d100      	bne.n	8002340 <HAL_UART_IRQHandler+0x48>
 800233e:	e1ba      	b.n	80026b6 <HAL_UART_IRQHandler+0x3be>
      {
        huart->RxISR(huart);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	0010      	movs	r0, r2
 8002348:	4798      	blx	r3
      }
      return;
 800234a:	e1b4      	b.n	80026b6 <HAL_UART_IRQHandler+0x3be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d100      	bne.n	8002354 <HAL_UART_IRQHandler+0x5c>
 8002352:	e0d9      	b.n	8002508 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2201      	movs	r2, #1
 8002358:	4013      	ands	r3, r2
 800235a:	d104      	bne.n	8002366 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4aa4      	ldr	r2, [pc, #656]	; (80025f0 <HAL_UART_IRQHandler+0x2f8>)
 8002360:	4013      	ands	r3, r2
 8002362:	d100      	bne.n	8002366 <HAL_UART_IRQHandler+0x6e>
 8002364:	e0d0      	b.n	8002508 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2201      	movs	r2, #1
 800236a:	4013      	ands	r3, r2
 800236c:	d010      	beq.n	8002390 <HAL_UART_IRQHandler+0x98>
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4013      	ands	r3, r2
 8002376:	d00b      	beq.n	8002390 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2201      	movs	r2, #1
 800237e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	589b      	ldr	r3, [r3, r2]
 8002386:	2201      	movs	r2, #1
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2202      	movs	r2, #2
 8002394:	4013      	ands	r3, r2
 8002396:	d00f      	beq.n	80023b8 <HAL_UART_IRQHandler+0xc0>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2201      	movs	r2, #1
 800239c:	4013      	ands	r3, r2
 800239e:	d00b      	beq.n	80023b8 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2202      	movs	r2, #2
 80023a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	589b      	ldr	r3, [r3, r2]
 80023ae:	2204      	movs	r2, #4
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2204      	movs	r2, #4
 80023bc:	4013      	ands	r3, r2
 80023be:	d00f      	beq.n	80023e0 <HAL_UART_IRQHandler+0xe8>
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2201      	movs	r2, #1
 80023c4:	4013      	ands	r3, r2
 80023c6:	d00b      	beq.n	80023e0 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2204      	movs	r2, #4
 80023ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	589b      	ldr	r3, [r3, r2]
 80023d6:	2202      	movs	r2, #2
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2208      	movs	r2, #8
 80023e4:	4013      	ands	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2220      	movs	r2, #32
 80023ec:	4013      	ands	r3, r2
 80023ee:	d103      	bne.n	80023f8 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2201      	movs	r2, #1
 80023f4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80023f6:	d00b      	beq.n	8002410 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2208      	movs	r2, #8
 80023fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	589b      	ldr	r3, [r3, r2]
 8002406:	2208      	movs	r2, #8
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4013      	ands	r3, r2
 8002418:	d011      	beq.n	800243e <HAL_UART_IRQHandler+0x146>
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	04db      	lsls	r3, r3, #19
 8002420:	4013      	ands	r3, r2
 8002422:	d00c      	beq.n	800243e <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2280      	movs	r2, #128	; 0x80
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	589b      	ldr	r3, [r3, r2]
 8002434:	2220      	movs	r2, #32
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2280      	movs	r2, #128	; 0x80
 8002442:	589b      	ldr	r3, [r3, r2]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d100      	bne.n	800244a <HAL_UART_IRQHandler+0x152>
 8002448:	e137      	b.n	80026ba <HAL_UART_IRQHandler+0x3c2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	2220      	movs	r2, #32
 800244e:	4013      	ands	r3, r2
 8002450:	d00c      	beq.n	800246c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2220      	movs	r2, #32
 8002456:	4013      	ands	r3, r2
 8002458:	d008      	beq.n	800246c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	0010      	movs	r0, r2
 800246a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	589b      	ldr	r3, [r3, r2]
 8002472:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2240      	movs	r2, #64	; 0x40
 800247c:	4013      	ands	r3, r2
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d003      	beq.n	800248a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2228      	movs	r2, #40	; 0x28
 8002486:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002488:	d033      	beq.n	80024f2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 fc71 	bl	8002d74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2240      	movs	r2, #64	; 0x40
 800249a:	4013      	ands	r3, r2
 800249c:	2b40      	cmp	r3, #64	; 0x40
 800249e:	d123      	bne.n	80024e8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2140      	movs	r1, #64	; 0x40
 80024ac:	438a      	bics	r2, r1
 80024ae:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d012      	beq.n	80024de <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a4d      	ldr	r2, [pc, #308]	; (80025f4 <HAL_UART_IRQHandler+0x2fc>)
 80024be:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7fe fcb9 	bl	8000e3c <HAL_DMA_Abort_IT>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d01a      	beq.n	8002504 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	0018      	movs	r0, r3
 80024da:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024dc:	e012      	b.n	8002504 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 f8ff 	bl	80026e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e6:	e00d      	b.n	8002504 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f8fa 	bl	80026e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f0:	e008      	b.n	8002504 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 f8f5 	bl	80026e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	2100      	movs	r1, #0
 8002500:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002502:	e0da      	b.n	80026ba <HAL_UART_IRQHandler+0x3c2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002504:	46c0      	nop			; (mov r8, r8)
    return;
 8002506:	e0d8      	b.n	80026ba <HAL_UART_IRQHandler+0x3c2>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250c:	2b01      	cmp	r3, #1
 800250e:	d000      	beq.n	8002512 <HAL_UART_IRQHandler+0x21a>
 8002510:	e0b2      	b.n	8002678 <HAL_UART_IRQHandler+0x380>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2210      	movs	r2, #16
 8002516:	4013      	ands	r3, r2
 8002518:	d100      	bne.n	800251c <HAL_UART_IRQHandler+0x224>
 800251a:	e0ad      	b.n	8002678 <HAL_UART_IRQHandler+0x380>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2210      	movs	r2, #16
 8002520:	4013      	ands	r3, r2
 8002522:	d100      	bne.n	8002526 <HAL_UART_IRQHandler+0x22e>
 8002524:	e0a8      	b.n	8002678 <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2210      	movs	r2, #16
 800252c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2240      	movs	r2, #64	; 0x40
 8002536:	4013      	ands	r3, r2
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d15f      	bne.n	80025fc <HAL_UART_IRQHandler+0x304>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	2108      	movs	r1, #8
 8002546:	187b      	adds	r3, r7, r1
 8002548:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800254a:	187b      	adds	r3, r7, r1
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d100      	bne.n	8002554 <HAL_UART_IRQHandler+0x25c>
 8002552:	e0b4      	b.n	80026be <HAL_UART_IRQHandler+0x3c6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2258      	movs	r2, #88	; 0x58
 8002558:	5a9b      	ldrh	r3, [r3, r2]
 800255a:	187a      	adds	r2, r7, r1
 800255c:	8812      	ldrh	r2, [r2, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d300      	bcc.n	8002564 <HAL_UART_IRQHandler+0x26c>
 8002562:	e0ac      	b.n	80026be <HAL_UART_IRQHandler+0x3c6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	187a      	adds	r2, r7, r1
 8002568:	215a      	movs	r1, #90	; 0x5a
 800256a:	8812      	ldrh	r2, [r2, #0]
 800256c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b20      	cmp	r3, #32
 8002576:	d02a      	beq.n	80025ce <HAL_UART_IRQHandler+0x2d6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	491d      	ldr	r1, [pc, #116]	; (80025f8 <HAL_UART_IRQHandler+0x300>)
 8002584:	400a      	ands	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2101      	movs	r1, #1
 8002594:	438a      	bics	r2, r1
 8002596:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2140      	movs	r1, #64	; 0x40
 80025a4:	438a      	bics	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2110      	movs	r1, #16
 80025c0:	438a      	bics	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7fe fbff 	bl	8000dcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2258      	movs	r2, #88	; 0x58
 80025d2:	5a9a      	ldrh	r2, [r3, r2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	215a      	movs	r1, #90	; 0x5a
 80025d8:	5a5b      	ldrh	r3, [r3, r1]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0011      	movs	r1, r2
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 f885 	bl	80026f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80025ea:	e068      	b.n	80026be <HAL_UART_IRQHandler+0x3c6>
 80025ec:	0000080f 	.word	0x0000080f
 80025f0:	04000120 	.word	0x04000120
 80025f4:	08002dd5 	.word	0x08002dd5
 80025f8:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2258      	movs	r2, #88	; 0x58
 8002600:	5a99      	ldrh	r1, [r3, r2]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	225a      	movs	r2, #90	; 0x5a
 8002606:	5a9b      	ldrh	r3, [r3, r2]
 8002608:	b29a      	uxth	r2, r3
 800260a:	200a      	movs	r0, #10
 800260c:	183b      	adds	r3, r7, r0
 800260e:	1a8a      	subs	r2, r1, r2
 8002610:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	225a      	movs	r2, #90	; 0x5a
 8002616:	5a9b      	ldrh	r3, [r3, r2]
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d051      	beq.n	80026c2 <HAL_UART_IRQHandler+0x3ca>
          &&(nb_rx_data > 0U) )
 800261e:	183b      	adds	r3, r7, r0
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d04d      	beq.n	80026c2 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4927      	ldr	r1, [pc, #156]	; (80026d0 <HAL_UART_IRQHandler+0x3d8>)
 8002632:	400a      	ands	r2, r1
 8002634:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2101      	movs	r1, #1
 8002642:	438a      	bics	r2, r1
 8002644:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2220      	movs	r2, #32
 800264a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2110      	movs	r1, #16
 8002664:	438a      	bics	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002668:	183b      	adds	r3, r7, r0
 800266a:	881a      	ldrh	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0011      	movs	r1, r2
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f83f 	bl	80026f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002676:	e024      	b.n	80026c2 <HAL_UART_IRQHandler+0x3ca>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	4013      	ands	r3, r2
 800267e:	d00d      	beq.n	800269c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	4013      	ands	r3, r2
 8002686:	d009      	beq.n	800269c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01a      	beq.n	80026c6 <HAL_UART_IRQHandler+0x3ce>
    {
      huart->TxISR(huart);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	0010      	movs	r0, r2
 8002698:	4798      	blx	r3
    }
    return;
 800269a:	e014      	b.n	80026c6 <HAL_UART_IRQHandler+0x3ce>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2240      	movs	r2, #64	; 0x40
 80026a0:	4013      	ands	r3, r2
 80026a2:	d011      	beq.n	80026c8 <HAL_UART_IRQHandler+0x3d0>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2240      	movs	r2, #64	; 0x40
 80026a8:	4013      	ands	r3, r2
 80026aa:	d00d      	beq.n	80026c8 <HAL_UART_IRQHandler+0x3d0>
  {
    UART_EndTransmit_IT(huart);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 fba7 	bl	8002e02 <UART_EndTransmit_IT>
    return;
 80026b4:	e008      	b.n	80026c8 <HAL_UART_IRQHandler+0x3d0>
      return;
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	e006      	b.n	80026c8 <HAL_UART_IRQHandler+0x3d0>
    return;
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	e004      	b.n	80026c8 <HAL_UART_IRQHandler+0x3d0>
      return;
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	e002      	b.n	80026c8 <HAL_UART_IRQHandler+0x3d0>
      return;
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	e000      	b.n	80026c8 <HAL_UART_IRQHandler+0x3d0>
    return;
 80026c6:	46c0      	nop			; (mov r8, r8)
  }

}
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b008      	add	sp, #32
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	fffffedf 	.word	0xfffffedf

080026d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b002      	add	sp, #8
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	000a      	movs	r2, r1
 80026fe:	1cbb      	adds	r3, r7, #2
 8002700:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b002      	add	sp, #8
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002714:	231e      	movs	r3, #30
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a8d      	ldr	r2, [pc, #564]	; (8002970 <UART_SetConfig+0x264>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a88      	ldr	r2, [pc, #544]	; (8002974 <UART_SetConfig+0x268>)
 8002752:	4013      	ands	r3, r2
 8002754:	0019      	movs	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a7f      	ldr	r2, [pc, #508]	; (8002978 <UART_SetConfig+0x26c>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a7b      	ldr	r2, [pc, #492]	; (800297c <UART_SetConfig+0x270>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d127      	bne.n	80027e2 <UART_SetConfig+0xd6>
 8002792:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <UART_SetConfig+0x274>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	2203      	movs	r2, #3
 8002798:	4013      	ands	r3, r2
 800279a:	2b03      	cmp	r3, #3
 800279c:	d00d      	beq.n	80027ba <UART_SetConfig+0xae>
 800279e:	d81b      	bhi.n	80027d8 <UART_SetConfig+0xcc>
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d014      	beq.n	80027ce <UART_SetConfig+0xc2>
 80027a4:	d818      	bhi.n	80027d8 <UART_SetConfig+0xcc>
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <UART_SetConfig+0xa4>
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d00a      	beq.n	80027c4 <UART_SetConfig+0xb8>
 80027ae:	e013      	b.n	80027d8 <UART_SetConfig+0xcc>
 80027b0:	231f      	movs	r3, #31
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e021      	b.n	80027fe <UART_SetConfig+0xf2>
 80027ba:	231f      	movs	r3, #31
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2202      	movs	r2, #2
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e01c      	b.n	80027fe <UART_SetConfig+0xf2>
 80027c4:	231f      	movs	r3, #31
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2204      	movs	r2, #4
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e017      	b.n	80027fe <UART_SetConfig+0xf2>
 80027ce:	231f      	movs	r3, #31
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	2208      	movs	r2, #8
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e012      	b.n	80027fe <UART_SetConfig+0xf2>
 80027d8:	231f      	movs	r3, #31
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2210      	movs	r2, #16
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e00d      	b.n	80027fe <UART_SetConfig+0xf2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a67      	ldr	r2, [pc, #412]	; (8002984 <UART_SetConfig+0x278>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d104      	bne.n	80027f6 <UART_SetConfig+0xea>
 80027ec:	231f      	movs	r3, #31
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	e003      	b.n	80027fe <UART_SetConfig+0xf2>
 80027f6:	231f      	movs	r3, #31
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2210      	movs	r2, #16
 80027fc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	429a      	cmp	r2, r3
 8002808:	d15d      	bne.n	80028c6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800280a:	231f      	movs	r3, #31
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d015      	beq.n	8002840 <UART_SetConfig+0x134>
 8002814:	dc18      	bgt.n	8002848 <UART_SetConfig+0x13c>
 8002816:	2b04      	cmp	r3, #4
 8002818:	d00d      	beq.n	8002836 <UART_SetConfig+0x12a>
 800281a:	dc15      	bgt.n	8002848 <UART_SetConfig+0x13c>
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <UART_SetConfig+0x11a>
 8002820:	2b02      	cmp	r3, #2
 8002822:	d005      	beq.n	8002830 <UART_SetConfig+0x124>
 8002824:	e010      	b.n	8002848 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002826:	f7ff fa7d 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 800282a:	0003      	movs	r3, r0
 800282c:	61bb      	str	r3, [r7, #24]
        break;
 800282e:	e012      	b.n	8002856 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002830:	4b55      	ldr	r3, [pc, #340]	; (8002988 <UART_SetConfig+0x27c>)
 8002832:	61bb      	str	r3, [r7, #24]
        break;
 8002834:	e00f      	b.n	8002856 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002836:	f7ff fa07 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 800283a:	0003      	movs	r3, r0
 800283c:	61bb      	str	r3, [r7, #24]
        break;
 800283e:	e00a      	b.n	8002856 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	61bb      	str	r3, [r7, #24]
        break;
 8002846:	e006      	b.n	8002856 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800284c:	231e      	movs	r3, #30
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
        break;
 8002854:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d100      	bne.n	800285e <UART_SetConfig+0x152>
 800285c:	e07b      	b.n	8002956 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	005a      	lsls	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	18d2      	adds	r2, r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0019      	movs	r1, r3
 8002870:	0010      	movs	r0, r2
 8002872:	f7fd fc49 	bl	8000108 <__udivsi3>
 8002876:	0003      	movs	r3, r0
 8002878:	b29b      	uxth	r3, r3
 800287a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	d91c      	bls.n	80028bc <UART_SetConfig+0x1b0>
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	025b      	lsls	r3, r3, #9
 8002888:	429a      	cmp	r2, r3
 800288a:	d217      	bcs.n	80028bc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	b29a      	uxth	r2, r3
 8002890:	200e      	movs	r0, #14
 8002892:	183b      	adds	r3, r7, r0
 8002894:	210f      	movs	r1, #15
 8002896:	438a      	bics	r2, r1
 8002898:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2207      	movs	r2, #7
 80028a2:	4013      	ands	r3, r2
 80028a4:	b299      	uxth	r1, r3
 80028a6:	183b      	adds	r3, r7, r0
 80028a8:	183a      	adds	r2, r7, r0
 80028aa:	8812      	ldrh	r2, [r2, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	183a      	adds	r2, r7, r0
 80028b6:	8812      	ldrh	r2, [r2, #0]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	e04c      	b.n	8002956 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80028bc:	231e      	movs	r3, #30
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	e047      	b.n	8002956 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028c6:	231f      	movs	r3, #31
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d015      	beq.n	80028fc <UART_SetConfig+0x1f0>
 80028d0:	dc18      	bgt.n	8002904 <UART_SetConfig+0x1f8>
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d00d      	beq.n	80028f2 <UART_SetConfig+0x1e6>
 80028d6:	dc15      	bgt.n	8002904 <UART_SetConfig+0x1f8>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <UART_SetConfig+0x1d6>
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d005      	beq.n	80028ec <UART_SetConfig+0x1e0>
 80028e0:	e010      	b.n	8002904 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e2:	f7ff fa1f 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 80028e6:	0003      	movs	r3, r0
 80028e8:	61bb      	str	r3, [r7, #24]
        break;
 80028ea:	e012      	b.n	8002912 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028ec:	4b26      	ldr	r3, [pc, #152]	; (8002988 <UART_SetConfig+0x27c>)
 80028ee:	61bb      	str	r3, [r7, #24]
        break;
 80028f0:	e00f      	b.n	8002912 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028f2:	f7ff f9a9 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 80028f6:	0003      	movs	r3, r0
 80028f8:	61bb      	str	r3, [r7, #24]
        break;
 80028fa:	e00a      	b.n	8002912 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	61bb      	str	r3, [r7, #24]
        break;
 8002902:	e006      	b.n	8002912 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002908:	231e      	movs	r3, #30
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
        break;
 8002910:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01e      	beq.n	8002956 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	085a      	lsrs	r2, r3, #1
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	18d2      	adds	r2, r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0019      	movs	r1, r3
 8002928:	0010      	movs	r0, r2
 800292a:	f7fd fbed 	bl	8000108 <__udivsi3>
 800292e:	0003      	movs	r3, r0
 8002930:	b29b      	uxth	r3, r3
 8002932:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	d909      	bls.n	800294e <UART_SetConfig+0x242>
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	025b      	lsls	r3, r3, #9
 8002940:	429a      	cmp	r2, r3
 8002942:	d204      	bcs.n	800294e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	60da      	str	r2, [r3, #12]
 800294c:	e003      	b.n	8002956 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800294e:	231e      	movs	r3, #30
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002962:	231e      	movs	r3, #30
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	781b      	ldrb	r3, [r3, #0]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b008      	add	sp, #32
 800296e:	bd80      	pop	{r7, pc}
 8002970:	ffff69f3 	.word	0xffff69f3
 8002974:	ffffcfff 	.word	0xffffcfff
 8002978:	fffff4ff 	.word	0xfffff4ff
 800297c:	40013800 	.word	0x40013800
 8002980:	40021000 	.word	0x40021000
 8002984:	40004400 	.word	0x40004400
 8002988:	007a1200 	.word	0x007a1200

0800298c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	2201      	movs	r2, #1
 800299a:	4013      	ands	r3, r2
 800299c:	d00b      	beq.n	80029b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a4a      	ldr	r2, [pc, #296]	; (8002ad0 <UART_AdvFeatureConfig+0x144>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d00b      	beq.n	80029d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a43      	ldr	r2, [pc, #268]	; (8002ad4 <UART_AdvFeatureConfig+0x148>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	0019      	movs	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2204      	movs	r2, #4
 80029de:	4013      	ands	r3, r2
 80029e0:	d00b      	beq.n	80029fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a3b      	ldr	r2, [pc, #236]	; (8002ad8 <UART_AdvFeatureConfig+0x14c>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2208      	movs	r2, #8
 8002a00:	4013      	ands	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a34      	ldr	r2, [pc, #208]	; (8002adc <UART_AdvFeatureConfig+0x150>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2210      	movs	r2, #16
 8002a22:	4013      	ands	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <UART_AdvFeatureConfig+0x154>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2220      	movs	r2, #32
 8002a44:	4013      	ands	r3, r2
 8002a46:	d00b      	beq.n	8002a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <UART_AdvFeatureConfig+0x158>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	4013      	ands	r3, r2
 8002a68:	d01d      	beq.n	8002aa6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <UART_AdvFeatureConfig+0x15c>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	035b      	lsls	r3, r3, #13
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d10b      	bne.n	8002aa6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <UART_AdvFeatureConfig+0x160>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	4013      	ands	r3, r2
 8002aae:	d00b      	beq.n	8002ac8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <UART_AdvFeatureConfig+0x164>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	0019      	movs	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
  }
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	fffdffff 	.word	0xfffdffff
 8002ad4:	fffeffff 	.word	0xfffeffff
 8002ad8:	fffbffff 	.word	0xfffbffff
 8002adc:	ffff7fff 	.word	0xffff7fff
 8002ae0:	ffffefff 	.word	0xffffefff
 8002ae4:	ffffdfff 	.word	0xffffdfff
 8002ae8:	ffefffff 	.word	0xffefffff
 8002aec:	ff9fffff 	.word	0xff9fffff
 8002af0:	fff7ffff 	.word	0xfff7ffff

08002af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	2100      	movs	r1, #0
 8002b02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b04:	f7fe f856 	bl	8000bb4 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2208      	movs	r2, #8
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d10c      	bne.n	8002b34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	0391      	lsls	r1, r2, #14
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <UART_CheckIdleState+0x8c>)
 8002b24:	9200      	str	r2, [sp, #0]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f000 f82c 	bl	8002b84 <UART_WaitOnFlagUntilTimeout>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d001      	beq.n	8002b34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e021      	b.n	8002b78 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d10c      	bne.n	8002b5c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	03d1      	lsls	r1, r2, #15
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <UART_CheckIdleState+0x8c>)
 8002b4c:	9200      	str	r2, [sp, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f000 f818 	bl	8002b84 <UART_WaitOnFlagUntilTimeout>
 8002b54:	1e03      	subs	r3, r0, #0
 8002b56:	d001      	beq.n	8002b5c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e00d      	b.n	8002b78 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2220      	movs	r2, #32
 8002b66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2274      	movs	r2, #116	; 0x74
 8002b72:	2100      	movs	r1, #0
 8002b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b004      	add	sp, #16
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	01ffffff 	.word	0x01ffffff

08002b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	1dfb      	adds	r3, r7, #7
 8002b92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b94:	e05e      	b.n	8002c54 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	d05b      	beq.n	8002c54 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9c:	f7fe f80a 	bl	8000bb4 <HAL_GetTick>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d302      	bcc.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d11b      	bne.n	8002bea <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	492f      	ldr	r1, [pc, #188]	; (8002c7c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	438a      	bics	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2274      	movs	r2, #116	; 0x74
 8002be2:	2100      	movs	r1, #0
 8002be4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e044      	b.n	8002c74 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d02e      	beq.n	8002c54 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	401a      	ands	r2, r3
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d124      	bne.n	8002c54 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4917      	ldr	r1, [pc, #92]	; (8002c7c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2101      	movs	r1, #1
 8002c30:	438a      	bics	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	2120      	movs	r1, #32
 8002c46:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2274      	movs	r2, #116	; 0x74
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e00f      	b.n	8002c74 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	425a      	negs	r2, r3
 8002c64:	4153      	adcs	r3, r2
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	001a      	movs	r2, r3
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d091      	beq.n	8002b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fffffe5f 	.word	0xfffffe5f

08002c80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	1dbb      	adds	r3, r7, #6
 8002c8c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1dba      	adds	r2, r7, #6
 8002c98:	2158      	movs	r1, #88	; 0x58
 8002c9a:	8812      	ldrh	r2, [r2, #0]
 8002c9c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1dba      	adds	r2, r7, #6
 8002ca2:	215a      	movs	r1, #90	; 0x5a
 8002ca4:	8812      	ldrh	r2, [r2, #0]
 8002ca6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	015b      	lsls	r3, r3, #5
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d10d      	bne.n	8002cd6 <UART_Start_Receive_IT+0x56>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d104      	bne.n	8002ccc <UART_Start_Receive_IT+0x4c>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	225c      	movs	r2, #92	; 0x5c
 8002cc6:	4928      	ldr	r1, [pc, #160]	; (8002d68 <UART_Start_Receive_IT+0xe8>)
 8002cc8:	5299      	strh	r1, [r3, r2]
 8002cca:	e01a      	b.n	8002d02 <UART_Start_Receive_IT+0x82>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	225c      	movs	r2, #92	; 0x5c
 8002cd0:	21ff      	movs	r1, #255	; 0xff
 8002cd2:	5299      	strh	r1, [r3, r2]
 8002cd4:	e015      	b.n	8002d02 <UART_Start_Receive_IT+0x82>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10d      	bne.n	8002cfa <UART_Start_Receive_IT+0x7a>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <UART_Start_Receive_IT+0x70>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	225c      	movs	r2, #92	; 0x5c
 8002cea:	21ff      	movs	r1, #255	; 0xff
 8002cec:	5299      	strh	r1, [r3, r2]
 8002cee:	e008      	b.n	8002d02 <UART_Start_Receive_IT+0x82>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	225c      	movs	r2, #92	; 0x5c
 8002cf4:	217f      	movs	r1, #127	; 0x7f
 8002cf6:	5299      	strh	r1, [r3, r2]
 8002cf8:	e003      	b.n	8002d02 <UART_Start_Receive_IT+0x82>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	225c      	movs	r2, #92	; 0x5c
 8002cfe:	2100      	movs	r1, #0
 8002d00:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	2100      	movs	r1, #0
 8002d08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2222      	movs	r2, #34	; 0x22
 8002d0e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	015b      	lsls	r3, r3, #5
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d107      	bne.n	8002d3c <UART_Start_Receive_IT+0xbc>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d103      	bne.n	8002d3c <UART_Start_Receive_IT+0xbc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <UART_Start_Receive_IT+0xec>)
 8002d38:	665a      	str	r2, [r3, #100]	; 0x64
 8002d3a:	e002      	b.n	8002d42 <UART_Start_Receive_IT+0xc2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <UART_Start_Receive_IT+0xf0>)
 8002d40:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2274      	movs	r2, #116	; 0x74
 8002d46:	2100      	movs	r1, #0
 8002d48:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2190      	movs	r1, #144	; 0x90
 8002d56:	0049      	lsls	r1, r1, #1
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b004      	add	sp, #16
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	000001ff 	.word	0x000001ff
 8002d6c:	08002f21 	.word	0x08002f21
 8002d70:	08002e39 	.word	0x08002e39

08002d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4912      	ldr	r1, [pc, #72]	; (8002dd0 <UART_EndRxTransfer+0x5c>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	438a      	bics	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2110      	movs	r1, #16
 8002db0:	438a      	bics	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b002      	add	sp, #8
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	fffffedf 	.word	0xfffffedf

08002dd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	225a      	movs	r2, #90	; 0x5a
 8002de6:	2100      	movs	r1, #0
 8002de8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2252      	movs	r2, #82	; 0x52
 8002dee:	2100      	movs	r1, #0
 8002df0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7ff fc75 	bl	80026e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b004      	add	sp, #16
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2140      	movs	r1, #64	; 0x40
 8002e16:	438a      	bics	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7ff fc53 	bl	80026d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b002      	add	sp, #8
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002e40:	200e      	movs	r0, #14
 8002e42:	183b      	adds	r3, r7, r0
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	215c      	movs	r1, #92	; 0x5c
 8002e48:	5a52      	ldrh	r2, [r2, r1]
 8002e4a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e50:	2b22      	cmp	r3, #34	; 0x22
 8002e52:	d157      	bne.n	8002f04 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	210c      	movs	r1, #12
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002e5e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	183b      	adds	r3, r7, r0
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b2d9      	uxtb	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	400a      	ands	r2, r1
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	225a      	movs	r2, #90	; 0x5a
 8002e84:	5a9b      	ldrh	r3, [r3, r2]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b299      	uxth	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	225a      	movs	r2, #90	; 0x5a
 8002e90:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	225a      	movs	r2, #90	; 0x5a
 8002e96:	5a9b      	ldrh	r3, [r3, r2]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d13a      	bne.n	8002f14 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	491c      	ldr	r1, [pc, #112]	; (8002f1c <UART_RxISR_8BIT+0xe4>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	438a      	bics	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d110      	bne.n	8002ef4 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2110      	movs	r1, #16
 8002ede:	438a      	bics	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2258      	movs	r2, #88	; 0x58
 8002ee6:	5a9a      	ldrh	r2, [r3, r2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0011      	movs	r1, r2
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7ff fc01 	bl	80026f4 <HAL_UARTEx_RxEventCallback>
 8002ef2:	e003      	b.n	8002efc <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f7fd fc10 	bl	800071c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002f02:	e007      	b.n	8002f14 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2108      	movs	r1, #8
 8002f10:	430a      	orrs	r2, r1
 8002f12:	619a      	str	r2, [r3, #24]
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b004      	add	sp, #16
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	fffffedf 	.word	0xfffffedf

08002f20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002f28:	200e      	movs	r0, #14
 8002f2a:	183b      	adds	r3, r7, r0
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	215c      	movs	r1, #92	; 0x5c
 8002f30:	5a52      	ldrh	r2, [r2, r1]
 8002f32:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f38:	2b22      	cmp	r3, #34	; 0x22
 8002f3a:	d157      	bne.n	8002fec <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	210c      	movs	r1, #12
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002f46:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8002f4e:	187b      	adds	r3, r7, r1
 8002f50:	183a      	adds	r2, r7, r0
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	8812      	ldrh	r2, [r2, #0]
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	225a      	movs	r2, #90	; 0x5a
 8002f6c:	5a9b      	ldrh	r3, [r3, r2]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b299      	uxth	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	225a      	movs	r2, #90	; 0x5a
 8002f78:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	225a      	movs	r2, #90	; 0x5a
 8002f7e:	5a9b      	ldrh	r3, [r3, r2]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d13a      	bne.n	8002ffc <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	491c      	ldr	r1, [pc, #112]	; (8003004 <UART_RxISR_16BIT+0xe4>)
 8002f92:	400a      	ands	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	438a      	bics	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d110      	bne.n	8002fdc <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2110      	movs	r1, #16
 8002fc6:	438a      	bics	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2258      	movs	r2, #88	; 0x58
 8002fce:	5a9a      	ldrh	r2, [r3, r2]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0011      	movs	r1, r2
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff fb8d 	bl	80026f4 <HAL_UARTEx_RxEventCallback>
 8002fda:	e003      	b.n	8002fe4 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7fd fb9c 	bl	800071c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002fea:	e007      	b.n	8002ffc <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2108      	movs	r1, #8
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	619a      	str	r2, [r3, #24]
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b004      	add	sp, #16
 8003002:	bd80      	pop	{r7, pc}
 8003004:	fffffedf 	.word	0xfffffedf

08003008 <__libc_init_array>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	2600      	movs	r6, #0
 800300c:	4d0c      	ldr	r5, [pc, #48]	; (8003040 <__libc_init_array+0x38>)
 800300e:	4c0d      	ldr	r4, [pc, #52]	; (8003044 <__libc_init_array+0x3c>)
 8003010:	1b64      	subs	r4, r4, r5
 8003012:	10a4      	asrs	r4, r4, #2
 8003014:	42a6      	cmp	r6, r4
 8003016:	d109      	bne.n	800302c <__libc_init_array+0x24>
 8003018:	2600      	movs	r6, #0
 800301a:	f000 f821 	bl	8003060 <_init>
 800301e:	4d0a      	ldr	r5, [pc, #40]	; (8003048 <__libc_init_array+0x40>)
 8003020:	4c0a      	ldr	r4, [pc, #40]	; (800304c <__libc_init_array+0x44>)
 8003022:	1b64      	subs	r4, r4, r5
 8003024:	10a4      	asrs	r4, r4, #2
 8003026:	42a6      	cmp	r6, r4
 8003028:	d105      	bne.n	8003036 <__libc_init_array+0x2e>
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	00b3      	lsls	r3, r6, #2
 800302e:	58eb      	ldr	r3, [r5, r3]
 8003030:	4798      	blx	r3
 8003032:	3601      	adds	r6, #1
 8003034:	e7ee      	b.n	8003014 <__libc_init_array+0xc>
 8003036:	00b3      	lsls	r3, r6, #2
 8003038:	58eb      	ldr	r3, [r5, r3]
 800303a:	4798      	blx	r3
 800303c:	3601      	adds	r6, #1
 800303e:	e7f2      	b.n	8003026 <__libc_init_array+0x1e>
 8003040:	080030b0 	.word	0x080030b0
 8003044:	080030b0 	.word	0x080030b0
 8003048:	080030b0 	.word	0x080030b0
 800304c:	080030b4 	.word	0x080030b4

08003050 <memset>:
 8003050:	0003      	movs	r3, r0
 8003052:	1882      	adds	r2, r0, r2
 8003054:	4293      	cmp	r3, r2
 8003056:	d100      	bne.n	800305a <memset+0xa>
 8003058:	4770      	bx	lr
 800305a:	7019      	strb	r1, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	e7f9      	b.n	8003054 <memset+0x4>

08003060 <_init>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr

0800306c <_fini>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr
